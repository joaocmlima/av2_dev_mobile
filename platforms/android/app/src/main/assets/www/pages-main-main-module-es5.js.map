{"version":3,"sources":["webpack:///node_modules/@angular/common/__ivy_ngcc__/fesm2015/http.js","webpack:///src/app/pages/main/main.page.html","webpack:///src/app/news/news-api.service.ts","webpack:///src/app/pages/main/main-routing.module.ts","webpack:///src/app/pages/main/main.module.ts","webpack:///src/app/pages/main/main.page.scss","webpack:///src/app/pages/main/main.page.ts"],"names":["HttpHandler","HttpBackend","HttpHeaders","headers","normalizedNames","Map","lazyUpdate","lazyInit","split","forEach","line","index","indexOf","name","slice","key","toLowerCase","value","trim","maybeSetNormalizedName","has","get","push","set","Object","keys","values","length","init","Array","from","clone","op","lcName","copyFrom","update","applyUpdate","other","concat","base","undefined","toDelete","existing","filter","fn","HttpUrlEncodingCodec","standardEncoding","decodeURIComponent","paramParser","rawParams","codec","map","params","param","eqIdx","decodeKey","decodeValue","val","list","v","encodeURIComponent","replace","HttpParams","options","updates","cloneFrom","encoder","fromString","fromObject","Error","isArray","res","eKey","encodeKey","encodeValue","join","idx","splice","mightHaveBody","method","isArrayBuffer","ArrayBuffer","isBlob","Blob","isFormData","FormData","HttpRequest","url","third","fourth","body","reportProgress","withCredentials","responseType","toUpperCase","urlWithParams","toString","qIdx","sep","JSON","stringify","type","setHeaders","reduce","setParams","HttpEventType","HttpResponseBase","defaultStatus","defaultStatusText","status","statusText","ok","HttpHeaderResponse","ResponseHeader","HttpResponse","Response","HttpErrorResponse","message","error","addBody","observe","HttpClient","handler","first","req","events$","pipe","handle","res$","event","request","callbackParam","append","ɵfac","HttpClient_Factory","t","ɵprov","token","factory","ctorParameters","HttpInterceptorHandler","next","interceptor","intercept","HTTP_INTERCEPTORS","NoopInterceptor","NoopInterceptor_Factory","nextRequestId","JSONP_ERR_NO_CALLBACK","JSONP_ERR_WRONG_METHOD","JSONP_ERR_WRONG_RESPONSE_TYPE","JsonpCallbackContext","JsonpClientBackend","callbackMap","document","observer","callback","nextCallback","node","createElement","src","finished","cancelled","data","cleanup","parentNode","removeChild","onLoad","complete","onError","addEventListener","appendChild","Sent","removeEventListener","JsonpClientBackend_Factory","decorators","args","JsonpInterceptor","jsonp","JsonpInterceptor_Factory","XSSI_PREFIX","getResponseUrl","xhr","responseURL","test","getAllResponseHeaders","getResponseHeader","XhrFactory","BrowserXhr","XMLHttpRequest","BrowserXhr_Factory","HttpXhrBackend","xhrFactory","build","open","setRequestHeader","detectedType","detectContentTypeHeader","reqBody","serializeBody","headerResponse","partialFromXhr","response","responseText","originalBody","parse","text","sentHeaders","onDownProgress","progressEvent","DownloadProgress","loaded","lengthComputable","total","partialText","onUpProgress","progress","UploadProgress","upload","send","readyState","DONE","abort","HttpXhrBackend_Factory","XSRF_COOKIE_NAME","XSRF_HEADER_NAME","HttpXsrfTokenExtractor","HttpXsrfCookieExtractor","doc","platform","cookieName","lastCookieString","lastToken","parseCount","cookieString","cookie","HttpXsrfCookieExtractor_Factory","String","HttpXsrfInterceptor","tokenService","headerName","lcUrl","startsWith","getToken","HttpXsrfInterceptor_Factory","HttpInterceptingHandler","backend","injector","chain","interceptors","reduceRight","HttpInterceptingHandler_Factory","interceptingHandler","jsonpCallbackContext","window","HttpClientXsrfModule","ngModule","providers","provide","useClass","useValue","ɵmod","ɵinj","HttpClientXsrfModule_Factory","useExisting","multi","HttpClientModule","HttpClientModule_Factory","imports","withOptions","ngJitMode","HttpClientJsonpModule","HttpClientJsonpModule_Factory","useFactory","NewsApiService","http","chave","caminhoPadrao","assunto","page","resultsPerPage","result","console","log","providedIn","routes","path","component","MainPageRoutingModule","forChild","exports","MainPageModule","declarations","MainPage","newsApi","activatedRoute","loadingController","lista_news","subject","snapshot","paramMap","title","user","carregaPagina","setTimeout","target","getEverythingAbout","subscribe","articles","maxPage","Math","floor","totalResults","efeitoLoading","create","duration","loading","present","onDidDismiss","role","disabled","selector","template"],"mappingsaMA,W;;;AAEN;;;;;;;;;;;;UAUMC,W;;;AAGN;;;;;;;;AAOA;;;;;;;;;UAOMC,W;AACF;AACA,6BAAYC,OAAZ,EAAqB;AAAA;;AAAA;;AACjB;;;;AAIA,eAAKC,eAAL,GAAuB,IAAIC,GAAJ,EAAvB;AACA;;;;AAGA,eAAKC,UAAL,GAAkB,IAAlB;;AACA,cAAI,CAACH,OAAL,EAAc;AACV,iBAAKA,OAAL,GAAe,IAAIE,GAAJ,EAAf;AACH,WAFD,MAGK,IAAI,OAAOF,OAAP,KAAmB,QAAvB,EAAiC;AAClC,iBAAKI,QAAL,GAAgB,YAAM;AAClB,mBAAI,CAACJ,OAAL,GAAe,IAAIE,GAAJ,EAAf;AACAF,qBAAO,CAACK,KAAR,CAAc,IAAd,EAAoBC,OAApB,CAA4B,UAAAC,IAAI,EAAI;AAChC,oBAAMC,KAAK,GAAGD,IAAI,CAACE,OAAL,CAAa,GAAb,CAAd;;AACA,oBAAID,KAAK,GAAG,CAAZ,EAAe;AACX,sBAAME,IAAI,GAAGH,IAAI,CAACI,KAAL,CAAW,CAAX,EAAcH,KAAd,CAAb;AACA,sBAAMI,GAAG,GAAGF,IAAI,CAACG,WAAL,EAAZ;AACA,sBAAMC,KAAK,GAAGP,IAAI,CAACI,KAAL,CAAWH,KAAK,GAAG,CAAnB,EAAsBO,IAAtB,EAAd;;AACA,uBAAI,CAACC,sBAAL,CAA4BN,IAA5B,EAAkCE,GAAlC;;AACA,sBAAI,KAAI,CAACZ,OAAL,CAAaiB,GAAb,CAAiBL,GAAjB,CAAJ,EAA2B;AACvB,yBAAI,CAACZ,OAAL,CAAakB,GAAb,CAAiBN,GAAjB,EAAsBO,IAAtB,CAA2BL,KAA3B;AACH,mBAFD,MAGK;AACD,yBAAI,CAACd,OAAL,CAAaoB,GAAb,CAAiBR,GAAjB,EAAsB,CAACE,KAAD,CAAtB;AACH;AACJ;AACJ,eAdD;AAeH,aAjBD;AAkBH,WAnBI,MAoBA;AACD,iBAAKV,QAAL,GAAgB,YAAM;AAClB,mBAAI,CAACJ,OAAL,GAAe,IAAIE,GAAJ,EAAf;AACAmB,oBAAM,CAACC,IAAP,CAAYtB,OAAZ,EAAqBM,OAArB,CAA6B,UAAAI,IAAI,EAAI;AACjC,oBAAIa,MAAM,GAAGvB,OAAO,CAACU,IAAD,CAApB;AACA,oBAAME,GAAG,GAAGF,IAAI,CAACG,WAAL,EAAZ;;AACA,oBAAI,OAAOU,MAAP,KAAkB,QAAtB,EAAgC;AAC5BA,wBAAM,GAAG,CAACA,MAAD,CAAT;AACH;;AACD,oBAAIA,MAAM,CAACC,MAAP,GAAgB,CAApB,EAAuB;AACnB,uBAAI,CAACxB,OAAL,CAAaoB,GAAb,CAAiBR,GAAjB,EAAsBW,MAAtB;;AACA,uBAAI,CAACP,sBAAL,CAA4BN,IAA5B,EAAkCE,GAAlC;AACH;AACJ,eAVD;AAWH,aAbD;AAcH;AACJ;AACD;;;;;;;;;;;8BAOIF,I,EAAM;AACN,iBAAKe,IAAL;AACA,mBAAO,KAAKzB,OAAL,CAAaiB,GAAb,CAAiBP,IAAI,CAACG,WAAL,EAAjB,CAAP;AACH;AACD;;;;;;;;;;8BAOIH,I,EAAM;AACN,iBAAKe,IAAL;AACA,gBAAMF,MAAM,GAAG,KAAKvB,OAAL,CAAakB,GAAb,CAAiBR,IAAI,CAACG,WAAL,EAAjB,CAAf;AACA,mBAAOU,MAAM,IAAIA,MAAM,CAACC,MAAP,GAAgB,CAA1B,GAA8BD,MAAM,CAAC,CAAD,CAApC,GAA0C,IAAjD;AACH;AACD;;;;;;;;iCAKO;AACH,iBAAKE,IAAL;AACA,mBAAOC,KAAK,CAACC,IAAN,CAAW,KAAK1B,eAAL,CAAqBsB,MAArB,EAAX,CAAP;AACH;AACD;;;;;;;;;;iCAOOb,I,EAAM;AACT,iBAAKe,IAAL;AACA,mBAAO,KAAKzB,OAAL,CAAakB,GAAb,CAAiBR,IAAI,CAACG,WAAL,EAAjB,KAAwC,IAA/C;AACH;AACD;;;;;;;;;;;;iCASOH,I,EAAMI,K,EAAO;AAChB,mBAAO,KAAKc,KAAL,CAAW;AAAElB,kBAAI,EAAJA,IAAF;AAAQI,mBAAK,EAALA,KAAR;AAAee,gBAAE,EAAE;AAAnB,aAAX,CAAP;AACH;AACD;;;;;;;;;;;;;8BAUInB,I,EAAMI,K,EAAO;AACb,mBAAO,KAAKc,KAAL,CAAW;AAAElB,kBAAI,EAAJA,IAAF;AAAQI,mBAAK,EAALA,KAAR;AAAee,gBAAE,EAAE;AAAnB,aAAX,CAAP;AACH;AACD;;;;;;;;;;;kCAQOnB,I,EAAMI,K,EAAO;AAChB,mBAAO,KAAKc,KAAL,CAAW;AAAElB,kBAAI,EAAJA,IAAF;AAAQI,mBAAK,EAALA,KAAR;AAAee,gBAAE,EAAE;AAAnB,aAAX,CAAP;AACH;;;iDACsBnB,I,EAAMoB,M,EAAQ;AACjC,gBAAI,CAAC,KAAK7B,eAAL,CAAqBgB,GAArB,CAAyBa,MAAzB,CAAL,EAAuC;AACnC,mBAAK7B,eAAL,CAAqBmB,GAArB,CAAyBU,MAAzB,EAAiCpB,IAAjC;AACH;AACJ;;;iCACM;AAAA;;AACH,gBAAI,CAAC,CAAC,KAAKN,QAAX,EAAqB;AACjB,kBAAI,KAAKA,QAAL,YAAyBL,WAA7B,EAA0C;AACtC,qBAAKgC,QAAL,CAAc,KAAK3B,QAAnB;AACH,eAFD,MAGK;AACD,qBAAKA,QAAL;AACH;;AACD,mBAAKA,QAAL,GAAgB,IAAhB;;AACA,kBAAI,CAAC,CAAC,KAAKD,UAAX,EAAuB;AACnB,qBAAKA,UAAL,CAAgBG,OAAhB,CAAwB,UAAA0B,MAAM;AAAA,yBAAI,MAAI,CAACC,WAAL,CAAiBD,MAAjB,CAAJ;AAAA,iBAA9B;AACA,qBAAK7B,UAAL,GAAkB,IAAlB;AACH;AACJ;AACJ;;;mCACQ+B,K,EAAO;AAAA;;AACZA,iBAAK,CAACT,IAAN;AACAC,iBAAK,CAACC,IAAN,CAAWO,KAAK,CAAClC,OAAN,CAAcsB,IAAd,EAAX,EAAiChB,OAAjC,CAAyC,UAAAM,GAAG,EAAI;AAC5C,oBAAI,CAACZ,OAAL,CAAaoB,GAAb,CAAiBR,GAAjB,EAAsBsB,KAAK,CAAClC,OAAN,CAAckB,GAAd,CAAkBN,GAAlB,CAAtB;;AACA,oBAAI,CAACX,eAAL,CAAqBmB,GAArB,CAAyBR,GAAzB,EAA8BsB,KAAK,CAACjC,eAAN,CAAsBiB,GAAtB,CAA0BN,GAA1B,CAA9B;AACH,aAHD;AAIH;;;gCACKoB,M,EAAQ;AACV,gBAAMJ,KAAK,GAAG,IAAI7B,WAAJ,EAAd;AACA6B,iBAAK,CAACxB,QAAN,GACK,CAAC,CAAC,KAAKA,QAAP,IAAmB,KAAKA,QAAL,YAAyBL,WAA7C,GAA4D,KAAKK,QAAjE,GAA4E,IADhF;AAEAwB,iBAAK,CAACzB,UAAN,GAAmB,CAAC,KAAKA,UAAL,IAAmB,EAApB,EAAwBgC,MAAxB,CAA+B,CAACH,MAAD,CAA/B,CAAnB;AACA,mBAAOJ,KAAP;AACH;;;sCACWI,M,EAAQ;AAChB,gBAAMpB,GAAG,GAAGoB,MAAM,CAACtB,IAAP,CAAYG,WAAZ,EAAZ;;AACA,oBAAQmB,MAAM,CAACH,EAAf;AACI,mBAAK,GAAL;AACA,mBAAK,GAAL;AACI,oBAAIf,KAAK,GAAGkB,MAAM,CAAClB,KAAnB;;AACA,oBAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC3BA,uBAAK,GAAG,CAACA,KAAD,CAAR;AACH;;AACD,oBAAIA,KAAK,CAACU,MAAN,KAAiB,CAArB,EAAwB;AACpB;AACH;;AACD,qBAAKR,sBAAL,CAA4BgB,MAAM,CAACtB,IAAnC,EAAyCE,GAAzC;AACA,oBAAMwB,IAAI,GAAG,CAACJ,MAAM,CAACH,EAAP,KAAc,GAAd,GAAoB,KAAK7B,OAAL,CAAakB,GAAb,CAAiBN,GAAjB,CAApB,GAA4CyB,SAA7C,KAA2D,EAAxE;AACAD,oBAAI,CAACjB,IAAL,OAAAiB,IAAI,qBAAStB,KAAT,EAAJ;AACA,qBAAKd,OAAL,CAAaoB,GAAb,CAAiBR,GAAjB,EAAsBwB,IAAtB;AACA;;AACJ,mBAAK,GAAL;AACI,oBAAME,QAAQ,GAAGN,MAAM,CAAClB,KAAxB;;AACA,oBAAI,CAACwB,QAAL,EAAe;AACX,uBAAKtC,OAAL,WAAoBY,GAApB;AACA,uBAAKX,eAAL,WAA4BW,GAA5B;AACH,iBAHD,MAIK;AACD,sBAAI2B,QAAQ,GAAG,KAAKvC,OAAL,CAAakB,GAAb,CAAiBN,GAAjB,CAAf;;AACA,sBAAI,CAAC2B,QAAL,EAAe;AACX;AACH;;AACDA,0BAAQ,GAAGA,QAAQ,CAACC,MAAT,CAAgB,UAAA1B,KAAK;AAAA,2BAAIwB,QAAQ,CAAC7B,OAAT,CAAiBK,KAAjB,MAA4B,CAAC,CAAjC;AAAA,mBAArB,CAAX;;AACA,sBAAIyB,QAAQ,CAACf,MAAT,KAAoB,CAAxB,EAA2B;AACvB,yBAAKxB,OAAL,WAAoBY,GAApB;AACA,yBAAKX,eAAL,WAA4BW,GAA5B;AACH,mBAHD,MAIK;AACD,yBAAKZ,OAAL,CAAaoB,GAAb,CAAiBR,GAAjB,EAAsB2B,QAAtB;AACH;AACJ;;AACD;AAnCR;AAqCH;AACD;;;;;;kCAGQE,E,EAAI;AAAA;;AACR,iBAAKhB,IAAL;AACAC,iBAAK,CAACC,IAAN,CAAW,KAAK1B,eAAL,CAAqBqB,IAArB,EAAX,EACKhB,OADL,CACa,UAAAM,GAAG;AAAA,qBAAI6B,EAAE,CAAC,MAAI,CAACxC,eAAL,CAAqBiB,GAArB,CAAyBN,GAAzB,CAAD,EAAgC,MAAI,CAACZ,OAAL,CAAakB,GAAb,CAAiBN,GAAjB,CAAhC,CAAN;AAAA,aADhB;AAEH;;;;;AAGL;;;;;;;;AAOA;;;;;;;;;;;;UAUM8B,oB;;;;;;;;AACF;;;;;oCAKU9B,G,EAAK;AACX,mBAAO+B,gBAAgB,CAAC/B,GAAD,CAAvB;AACH;AACD;;;;;;;;sCAKYE,K,EAAO;AACf,mBAAO6B,gBAAgB,CAAC7B,KAAD,CAAvB;AACH;AACD;;;;;;;;oCAKUF,G,EAAK;AACX,mBAAOgC,kBAAkB,CAAChC,GAAD,CAAzB;AACH;AACD;;;;;;;;sCAKYE,K,EAAO;AACf,mBAAO8B,kBAAkB,CAAC9B,KAAD,CAAzB;AACH;;;;;;AAEL,eAAS+B,WAAT,CAAqBC,SAArB,EAAgCC,KAAhC,EAAuC;AACnC,YAAMC,GAAG,GAAG,IAAI9C,GAAJ,EAAZ;;AACA,YAAI4C,SAAS,CAACtB,MAAV,GAAmB,CAAvB,EAA0B;AACtB,cAAMyB,MAAM,GAAGH,SAAS,CAACzC,KAAV,CAAgB,GAAhB,CAAf;AACA4C,gBAAM,CAAC3C,OAAP,CAAe,UAAC4C,KAAD,EAAW;AACtB,gBAAMC,KAAK,GAAGD,KAAK,CAACzC,OAAN,CAAc,GAAd,CAAd;;AADsB,uBAEH0C,KAAK,IAAI,CAAC,CAAV,GACf,CAACJ,KAAK,CAACK,SAAN,CAAgBF,KAAhB,CAAD,EAAyB,EAAzB,CADe,GAEf,CAACH,KAAK,CAACK,SAAN,CAAgBF,KAAK,CAACvC,KAAN,CAAY,CAAZ,EAAewC,KAAf,CAAhB,CAAD,EAAyCJ,KAAK,CAACM,WAAN,CAAkBH,KAAK,CAACvC,KAAN,CAAYwC,KAAK,GAAG,CAApB,CAAlB,CAAzC,CAJkB;AAAA;AAAA,gBAEfvC,GAFe;AAAA,gBAEV0C,GAFU;;AAKtB,gBAAMC,IAAI,GAAGP,GAAG,CAAC9B,GAAJ,CAAQN,GAAR,KAAgB,EAA7B;AACA2C,gBAAI,CAACpC,IAAL,CAAUmC,GAAV;AACAN,eAAG,CAAC5B,GAAJ,CAAQR,GAAR,EAAa2C,IAAb;AACH,WARD;AASH;;AACD,eAAOP,GAAP;AACH;;AACD,eAASL,gBAAT,CAA0Ba,CAA1B,EAA6B;AACzB,eAAOC,kBAAkB,CAACD,CAAD,CAAlB,CACFE,OADE,CACM,OADN,EACe,GADf,EAEFA,OAFE,CAEM,OAFN,EAEe,GAFf,EAGFA,OAHE,CAGM,OAHN,EAGe,GAHf,EAIFA,OAJE,CAIM,OAJN,EAIe,GAJf,EAKFA,OALE,CAKM,OALN,EAKe,GALf,EAMFA,OANE,CAMM,OANN,EAMe,GANf,EAOFA,OAPE,CAOM,OAPN,EAOe,GAPf,EAQFA,OARE,CAQM,OARN,EAQe,GARf,EASFA,OATE,CASM,OATN,EASe,GATf,CAAP;AAUH;AACD;;;;;;;;;;UAQMC,U;AACF,8BAA0B;AAAA;;AAAA,cAAdC,OAAc,uEAAJ,EAAI;;AAAA;;AACtB,eAAKC,OAAL,GAAe,IAAf;AACA,eAAKC,SAAL,GAAiB,IAAjB;AACA,eAAKC,OAAL,GAAeH,OAAO,CAACG,OAAR,IAAmB,IAAIrB,oBAAJ,EAAlC;;AACA,cAAI,CAAC,CAACkB,OAAO,CAACI,UAAd,EAA0B;AACtB,gBAAI,CAAC,CAACJ,OAAO,CAACK,UAAd,EAA0B;AACtB,oBAAM,IAAIC,KAAJ,kDAAN;AACH;;AACD,iBAAKlB,GAAL,GAAWH,WAAW,CAACe,OAAO,CAACI,UAAT,EAAqB,KAAKD,OAA1B,CAAtB;AACH,WALD,MAMK,IAAI,CAAC,CAACH,OAAO,CAACK,UAAd,EAA0B;AAC3B,iBAAKjB,GAAL,GAAW,IAAI9C,GAAJ,EAAX;AACAmB,kBAAM,CAACC,IAAP,CAAYsC,OAAO,CAACK,UAApB,EAAgC3D,OAAhC,CAAwC,UAAAM,GAAG,EAAI;AAC3C,kBAAME,KAAK,GAAG8C,OAAO,CAACK,UAAR,CAAmBrD,GAAnB,CAAd;;AACA,oBAAI,CAACoC,GAAL,CAAS5B,GAAT,CAAaR,GAAb,EAAkBc,KAAK,CAACyC,OAAN,CAAcrD,KAAd,IAAuBA,KAAvB,GAA+B,CAACA,KAAD,CAAjD;AACH,aAHD;AAIH,WANI,MAOA;AACD,iBAAKkC,GAAL,GAAW,IAAX;AACH;AACJ;AACD;;;;;;;;;;8BAMIE,K,EAAO;AACP,iBAAKzB,IAAL;AACA,mBAAO,KAAKuB,GAAL,CAAS/B,GAAT,CAAaiC,KAAb,CAAP;AACH;AACD;;;;;;;;;8BAMIA,K,EAAO;AACP,iBAAKzB,IAAL;AACA,gBAAM2C,GAAG,GAAG,KAAKpB,GAAL,CAAS9B,GAAT,CAAagC,KAAb,CAAZ;AACA,mBAAO,CAAC,CAACkB,GAAF,GAAQA,GAAG,CAAC,CAAD,CAAX,GAAiB,IAAxB;AACH;AACD;;;;;;;;;iCAMOlB,K,EAAO;AACV,iBAAKzB,IAAL;AACA,mBAAO,KAAKuB,GAAL,CAAS9B,GAAT,CAAagC,KAAb,KAAuB,IAA9B;AACH;AACD;;;;;;;iCAIO;AACH,iBAAKzB,IAAL;AACA,mBAAOC,KAAK,CAACC,IAAN,CAAW,KAAKqB,GAAL,CAAS1B,IAAT,EAAX,CAAP;AACH;AACD;;;;;;;;;iCAMO4B,K,EAAOpC,K,EAAO;AACjB,mBAAO,KAAKc,KAAL,CAAW;AAAEsB,mBAAK,EAALA,KAAF;AAASpC,mBAAK,EAALA,KAAT;AAAgBe,gBAAE,EAAE;AAApB,aAAX,CAAP;AACH;AACD;;;;;;;;;8BAMIqB,K,EAAOpC,K,EAAO;AACd,mBAAO,KAAKc,KAAL,CAAW;AAAEsB,mBAAK,EAALA,KAAF;AAASpC,mBAAK,EAALA,KAAT;AAAgBe,gBAAE,EAAE;AAApB,aAAX,CAAP;AACH;AACD;;;;;;;;;;kCAOOqB,K,EAAOpC,K,EAAO;AACjB,mBAAO,KAAKc,KAAL,CAAW;AAAEsB,mBAAK,EAALA,KAAF;AAASpC,mBAAK,EAALA,KAAT;AAAgBe,gBAAE,EAAE;AAApB,aAAX,CAAP;AACH;AACD;;;;;;;qCAIW;AAAA;;AACP,iBAAKJ,IAAL;AACA,mBAAO,KAAKH,IAAL,GACF0B,GADE,CACE,UAAApC,GAAG,EAAI;AACZ,kBAAMyD,IAAI,GAAG,MAAI,CAACN,OAAL,CAAaO,SAAb,CAAuB1D,GAAvB,CAAb,CADY,CAEZ;AACA;AACA;;;AACA,qBAAO,MAAI,CAACoC,GAAL,CAAS9B,GAAT,CAAaN,GAAb,EAAkBoC,GAAlB,CAAsB,UAAAlC,KAAK;AAAA,uBAAIuD,IAAI,GAAG,GAAP,GAAa,MAAI,CAACN,OAAL,CAAaQ,WAAb,CAAyBzD,KAAzB,CAAjB;AAAA,eAA3B,EACF0D,IADE,CACG,GADH,CAAP;AAEH,aARM,EASH;AACA;AAVG,aAWFhC,MAXE,CAWK,UAAAU,KAAK;AAAA,qBAAIA,KAAK,KAAK,EAAd;AAAA,aAXV,EAYFsB,IAZE,CAYG,GAZH,CAAP;AAaH;;;gCACKxC,M,EAAQ;AACV,gBAAMJ,KAAK,GAAG,IAAI+B,UAAJ,CAAe;AAAEI,qBAAO,EAAE,KAAKA;AAAhB,aAAf,CAAd;AACAnC,iBAAK,CAACkC,SAAN,GAAkB,KAAKA,SAAL,IAAkB,IAApC;AACAlC,iBAAK,CAACiC,OAAN,GAAgB,CAAC,KAAKA,OAAL,IAAgB,EAAjB,EAAqB1B,MAArB,CAA4B,CAACH,MAAD,CAA5B,CAAhB;AACA,mBAAOJ,KAAP;AACH;;;iCACM;AAAA;;AACH,gBAAI,KAAKoB,GAAL,KAAa,IAAjB,EAAuB;AACnB,mBAAKA,GAAL,GAAW,IAAI9C,GAAJ,EAAX;AACH;;AACD,gBAAI,KAAK4D,SAAL,KAAmB,IAAvB,EAA6B;AACzB,mBAAKA,SAAL,CAAerC,IAAf;AACA,mBAAKqC,SAAL,CAAexC,IAAf,GAAsBhB,OAAtB,CAA8B,UAAAM,GAAG;AAAA,uBAAI,MAAI,CAACoC,GAAL,CAAS5B,GAAT,CAAaR,GAAb,EAAkB,MAAI,CAACkD,SAAL,CAAed,GAAf,CAAmB9B,GAAnB,CAAuBN,GAAvB,CAAlB,CAAJ;AAAA,eAAjC;AACA,mBAAKiD,OAAL,CAAavD,OAAb,CAAqB,UAAA0B,MAAM,EAAI;AAC3B,wBAAQA,MAAM,CAACH,EAAf;AACI,uBAAK,GAAL;AACA,uBAAK,GAAL;AACI,wBAAMO,IAAI,GAAG,CAACJ,MAAM,CAACH,EAAP,KAAc,GAAd,GAAoB,MAAI,CAACmB,GAAL,CAAS9B,GAAT,CAAac,MAAM,CAACkB,KAApB,CAApB,GAAiDb,SAAlD,KAAgE,EAA7E;AACAD,wBAAI,CAACjB,IAAL,CAAUa,MAAM,CAAClB,KAAjB;;AACA,0BAAI,CAACkC,GAAL,CAAS5B,GAAT,CAAaY,MAAM,CAACkB,KAApB,EAA2Bd,IAA3B;;AACA;;AACJ,uBAAK,GAAL;AACI,wBAAIJ,MAAM,CAAClB,KAAP,KAAiBuB,SAArB,EAAgC;AAC5B,0BAAID,KAAI,GAAG,MAAI,CAACY,GAAL,CAAS9B,GAAT,CAAac,MAAM,CAACkB,KAApB,KAA8B,EAAzC;;AACA,0BAAMuB,GAAG,GAAGrC,KAAI,CAAC3B,OAAL,CAAauB,MAAM,CAAClB,KAApB,CAAZ;;AACA,0BAAI2D,GAAG,KAAK,CAAC,CAAb,EAAgB;AACZrC,6BAAI,CAACsC,MAAL,CAAYD,GAAZ,EAAiB,CAAjB;AACH;;AACD,0BAAIrC,KAAI,CAACZ,MAAL,GAAc,CAAlB,EAAqB;AACjB,8BAAI,CAACwB,GAAL,CAAS5B,GAAT,CAAaY,MAAM,CAACkB,KAApB,EAA2Bd,KAA3B;AACH,uBAFD,MAGK;AACD,8BAAI,CAACY,GAAL,WAAgBhB,MAAM,CAACkB,KAAvB;AACH;AACJ,qBAZD,MAaK;AACD,4BAAI,CAACF,GAAL,WAAgBhB,MAAM,CAACkB,KAAvB;;AACA;AACH;;AAxBT;AA0BH,eA3BD;AA4BA,mBAAKY,SAAL,GAAiB,KAAKD,OAAL,GAAe,IAAhC;AACH;AACJ;;;;;AAGL;;;;;;;;AAOA;;;;;AAGA,eAASc,aAAT,CAAuBC,MAAvB,EAA+B;AAC3B,gBAAQA,MAAR;AACI,eAAK,QAAL;AACA,eAAK,KAAL;AACA,eAAK,MAAL;AACA,eAAK,SAAL;AACA,eAAK,OAAL;AACI,mBAAO,KAAP;;AACJ;AACI,mBAAO,IAAP;AARR;AAUH;AACD;;;;;;;AAKA,eAASC,aAAT,CAAuB/D,KAAvB,EAA8B;AAC1B,eAAO,OAAOgE,WAAP,KAAuB,WAAvB,IAAsChE,KAAK,YAAYgE,WAA9D;AACH;AACD;;;;;;;AAKA,eAASC,MAAT,CAAgBjE,KAAhB,EAAuB;AACnB,eAAO,OAAOkE,IAAP,KAAgB,WAAhB,IAA+BlE,KAAK,YAAYkE,IAAvD;AACH;AACD;;;;;;;AAKA,eAASC,UAAT,CAAoBnE,KAApB,EAA2B;AACvB,eAAO,OAAOoE,QAAP,KAAoB,WAApB,IAAmCpE,KAAK,YAAYoE,QAA3D;AACH;AACD;;;;;;;;;;;;UAUMC,W;AACF,6BAAYP,MAAZ,EAAoBQ,GAApB,EAAyBC,KAAzB,EAAgCC,MAAhC,EAAwC;AAAA;;AACpC,eAAKF,GAAL,GAAWA,GAAX;AACA;;;;;;;;AAOA,eAAKG,IAAL,GAAY,IAAZ;AACA;;;;;;;AAMA,eAAKC,cAAL,GAAsB,KAAtB;AACA;;;;AAGA,eAAKC,eAAL,GAAuB,KAAvB;AACA;;;;;;;AAMA,eAAKC,YAAL,GAAoB,MAApB;AACA,eAAKd,MAAL,GAAcA,MAAM,CAACe,WAAP,EAAd,CA5BoC,CA6BpC;AACA;;AACA,cAAI/B,OAAJ,CA/BoC,CAgCpC;AACA;;AACA,cAAIe,aAAa,CAAC,KAAKC,MAAN,CAAb,IAA8B,CAAC,CAACU,MAApC,EAA4C;AACxC;AACA,iBAAKC,IAAL,GAAaF,KAAK,KAAKhD,SAAX,GAAwBgD,KAAxB,GAAgC,IAA5C;AACAzB,mBAAO,GAAG0B,MAAV;AACH,WAJD,MAKK;AACD;AACA1B,mBAAO,GAAGyB,KAAV;AACH,WA1CmC,CA2CpC;;;AACA,cAAIzB,OAAJ,EAAa;AACT;AACA,iBAAK4B,cAAL,GAAsB,CAAC,CAAC5B,OAAO,CAAC4B,cAAhC;AACA,iBAAKC,eAAL,GAAuB,CAAC,CAAC7B,OAAO,CAAC6B,eAAjC,CAHS,CAIT;;AACA,gBAAI,CAAC,CAAC7B,OAAO,CAAC8B,YAAd,EAA4B;AACxB,mBAAKA,YAAL,GAAoB9B,OAAO,CAAC8B,YAA5B;AACH,aAPQ,CAQT;;;AACA,gBAAI,CAAC,CAAC9B,OAAO,CAAC5D,OAAd,EAAuB;AACnB,mBAAKA,OAAL,GAAe4D,OAAO,CAAC5D,OAAvB;AACH;;AACD,gBAAI,CAAC,CAAC4D,OAAO,CAACX,MAAd,EAAsB;AAClB,mBAAKA,MAAL,GAAcW,OAAO,CAACX,MAAtB;AACH;AACJ,WA3DmC,CA4DpC;;;AACA,cAAI,CAAC,KAAKjD,OAAV,EAAmB;AACf,iBAAKA,OAAL,GAAe,IAAID,WAAJ,EAAf;AACH,WA/DmC,CAgEpC;;;AACA,cAAI,CAAC,KAAKkD,MAAV,EAAkB;AACd,iBAAKA,MAAL,GAAc,IAAIU,UAAJ,EAAd;AACA,iBAAKiC,aAAL,GAAqBR,GAArB;AACH,WAHD,MAIK;AACD;AACA,gBAAMnC,MAAM,GAAG,KAAKA,MAAL,CAAY4C,QAAZ,EAAf;;AACA,gBAAI5C,MAAM,CAACzB,MAAP,KAAkB,CAAtB,EAAyB;AACrB;AACA,mBAAKoE,aAAL,GAAqBR,GAArB;AACH,aAHD,MAIK;AACD;AACA,kBAAMU,IAAI,GAAGV,GAAG,CAAC3E,OAAJ,CAAY,GAAZ,CAAb,CAFC,CAGD;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,kBAAMsF,GAAG,GAAGD,IAAI,KAAK,CAAC,CAAV,GAAc,GAAd,GAAqBA,IAAI,GAAGV,GAAG,CAAC5D,MAAJ,GAAa,CAApB,GAAwB,GAAxB,GAA8B,EAA/D;AACA,mBAAKoE,aAAL,GAAqBR,GAAG,GAAGW,GAAN,GAAY9C,MAAjC;AACH;AACJ;AACJ;AACD;;;;;;;;0CAIgB;AACZ;AACA,gBAAI,KAAKsC,IAAL,KAAc,IAAlB,EAAwB;AACpB,qBAAO,IAAP;AACH,aAJW,CAKZ;AACA;;;AACA,gBAAIV,aAAa,CAAC,KAAKU,IAAN,CAAb,IAA4BR,MAAM,CAAC,KAAKQ,IAAN,CAAlC,IAAiDN,UAAU,CAAC,KAAKM,IAAN,CAA3D,IACA,OAAO,KAAKA,IAAZ,KAAqB,QADzB,EACmC;AAC/B,qBAAO,KAAKA,IAAZ;AACH,aAVW,CAWZ;;;AACA,gBAAI,KAAKA,IAAL,YAAqB5B,UAAzB,EAAqC;AACjC,qBAAO,KAAK4B,IAAL,CAAUM,QAAV,EAAP;AACH,aAdW,CAeZ;;;AACA,gBAAI,OAAO,KAAKN,IAAZ,KAAqB,QAArB,IAAiC,OAAO,KAAKA,IAAZ,KAAqB,SAAtD,IACA7D,KAAK,CAACyC,OAAN,CAAc,KAAKoB,IAAnB,CADJ,EAC8B;AAC1B,qBAAOS,IAAI,CAACC,SAAL,CAAe,KAAKV,IAApB,CAAP;AACH,aAnBW,CAoBZ;;;AACA,mBAAO,KAAKA,IAAL,CAAUM,QAAV,EAAP;AACH;AACD;;;;;;;;;oDAM0B;AACtB;AACA,gBAAI,KAAKN,IAAL,KAAc,IAAlB,EAAwB;AACpB,qBAAO,IAAP;AACH,aAJqB,CAKtB;;;AACA,gBAAIN,UAAU,CAAC,KAAKM,IAAN,CAAd,EAA2B;AACvB,qBAAO,IAAP;AACH,aARqB,CAStB;AACA;;;AACA,gBAAIR,MAAM,CAAC,KAAKQ,IAAN,CAAV,EAAuB;AACnB,qBAAO,KAAKA,IAAL,CAAUW,IAAV,IAAkB,IAAzB;AACH,aAbqB,CActB;;;AACA,gBAAIrB,aAAa,CAAC,KAAKU,IAAN,CAAjB,EAA8B;AAC1B,qBAAO,IAAP;AACH,aAjBqB,CAkBtB;AACA;;;AACA,gBAAI,OAAO,KAAKA,IAAZ,KAAqB,QAAzB,EAAmC;AAC/B,qBAAO,YAAP;AACH,aAtBqB,CAuBtB;;;AACA,gBAAI,KAAKA,IAAL,YAAqB5B,UAAzB,EAAqC;AACjC,qBAAO,iDAAP;AACH,aA1BqB,CA2BtB;;;AACA,gBAAI,OAAO,KAAK4B,IAAZ,KAAqB,QAArB,IAAiC,OAAO,KAAKA,IAAZ,KAAqB,QAAtD,IACA7D,KAAK,CAACyC,OAAN,CAAc,KAAKoB,IAAnB,CADJ,EAC8B;AAC1B,qBAAO,kBAAP;AACH,aA/BqB,CAgCtB;;;AACA,mBAAO,IAAP;AACH;;;kCACkB;AAAA,gBAAbvD,MAAa,uEAAJ,EAAI;AACf;AACA;AACA,gBAAM4C,MAAM,GAAG5C,MAAM,CAAC4C,MAAP,IAAiB,KAAKA,MAArC;AACA,gBAAMQ,GAAG,GAAGpD,MAAM,CAACoD,GAAP,IAAc,KAAKA,GAA/B;AACA,gBAAMM,YAAY,GAAG1D,MAAM,CAAC0D,YAAP,IAAuB,KAAKA,YAAjD,CALe,CAMf;AACA;AACA;AACA;;AACA,gBAAMH,IAAI,GAAIvD,MAAM,CAACuD,IAAP,KAAgBlD,SAAjB,GAA8BL,MAAM,CAACuD,IAArC,GAA4C,KAAKA,IAA9D,CAVe,CAWf;AACA;;AACA,gBAAME,eAAe,GAAIzD,MAAM,CAACyD,eAAP,KAA2BpD,SAA5B,GAAyCL,MAAM,CAACyD,eAAhD,GAAkE,KAAKA,eAA/F;AACA,gBAAMD,cAAc,GAAIxD,MAAM,CAACwD,cAAP,KAA0BnD,SAA3B,GAAwCL,MAAM,CAACwD,cAA/C,GAAgE,KAAKA,cAA5F,CAde,CAef;AACA;;AACA,gBAAIxF,OAAO,GAAGgC,MAAM,CAAChC,OAAP,IAAkB,KAAKA,OAArC;AACA,gBAAIiD,MAAM,GAAGjB,MAAM,CAACiB,MAAP,IAAiB,KAAKA,MAAnC,CAlBe,CAmBf;;AACA,gBAAIjB,MAAM,CAACmE,UAAP,KAAsB9D,SAA1B,EAAqC;AACjC;AACArC,qBAAO,GACHqB,MAAM,CAACC,IAAP,CAAYU,MAAM,CAACmE,UAAnB,EACKC,MADL,CACY,UAACpG,OAAD,EAAUU,IAAV;AAAA,uBAAmBV,OAAO,CAACoB,GAAR,CAAYV,IAAZ,EAAkBsB,MAAM,CAACmE,UAAP,CAAkBzF,IAAlB,CAAlB,CAAnB;AAAA,eADZ,EAC2EV,OAD3E,CADJ;AAGH,aAzBc,CA0Bf;;;AACA,gBAAIgC,MAAM,CAACqE,SAAX,EAAsB;AAClB;AACApD,oBAAM,GAAG5B,MAAM,CAACC,IAAP,CAAYU,MAAM,CAACqE,SAAnB,EACJD,MADI,CACG,UAACnD,MAAD,EAASC,KAAT;AAAA,uBAAmBD,MAAM,CAAC7B,GAAP,CAAW8B,KAAX,EAAkBlB,MAAM,CAACqE,SAAP,CAAiBnD,KAAjB,CAAlB,CAAnB;AAAA,eADH,EACkED,MADlE,CAAT;AAEH,aA/Bc,CAgCf;;;AACA,mBAAO,IAAIkC,WAAJ,CAAgBP,MAAhB,EAAwBQ,GAAxB,EAA6BG,IAA7B,EAAmC;AACtCtC,oBAAM,EAANA,MADsC;AAEtCjD,qBAAO,EAAPA,OAFsC;AAGtCwF,4BAAc,EAAdA,cAHsC;AAItCE,0BAAY,EAAZA,YAJsC;AAKtCD,6BAAe,EAAfA;AALsC,aAAnC,CAAP;AAOH;;;;;AAGL;;;;;;;;AAOA;;;;;;;AAKA,UAAIa,aAAJ;;AACA,OAAC,UAAUA,aAAV,EAAyB;AACtB;;;AAGAA,qBAAa,CAACA,aAAa,CAAC,MAAD,CAAb,GAAwB,CAAzB,CAAb,GAA2C,MAA3C;AACA;;;;AAGAA,qBAAa,CAACA,aAAa,CAAC,gBAAD,CAAb,GAAkC,CAAnC,CAAb,GAAqD,gBAArD;AACA;;;;AAGAA,qBAAa,CAACA,aAAa,CAAC,gBAAD,CAAb,GAAkC,CAAnC,CAAb,GAAqD,gBAArD;AACA;;;;AAGAA,qBAAa,CAACA,aAAa,CAAC,kBAAD,CAAb,GAAoC,CAArC,CAAb,GAAuD,kBAAvD;AACA;;;;AAGAA,qBAAa,CAACA,aAAa,CAAC,UAAD,CAAb,GAA4B,CAA7B,CAAb,GAA+C,UAA/C;AACA;;;;AAGAA,qBAAa,CAACA,aAAa,CAAC,MAAD,CAAb,GAAwB,CAAzB,CAAb,GAA2C,MAA3C;AACH,OAzBD,EAyBGA,aAAa,KAAKA,aAAa,GAAG,EAArB,CAzBhB;AA0BA;;;;;;;UAKMC,gB;AACF;;;;;;AAMA,gCAAY9E,IAAZ,EAAiE;AAAA,YAA/C+E,aAA+C,uEAA/B,GAA+B;AAAA,YAA1BC,iBAA0B,uEAAN,IAAM;;AAAA;;AAC7D;AACA;AACA,aAAKzG,OAAL,GAAeyB,IAAI,CAACzB,OAAL,IAAgB,IAAID,WAAJ,EAA/B;AACA,aAAK2G,MAAL,GAAcjF,IAAI,CAACiF,MAAL,KAAgBrE,SAAhB,GAA4BZ,IAAI,CAACiF,MAAjC,GAA0CF,aAAxD;AACA,aAAKG,UAAL,GAAkBlF,IAAI,CAACkF,UAAL,IAAmBF,iBAArC;AACA,aAAKrB,GAAL,GAAW3D,IAAI,CAAC2D,GAAL,IAAY,IAAvB,CAN6D,CAO7D;;AACA,aAAKwB,EAAL,GAAU,KAAKF,MAAL,IAAe,GAAf,IAAsB,KAAKA,MAAL,GAAc,GAA9C;AACH,O;AAEL;;;;;;;;;;;UASMG,kB;;;;;AACF;;;AAGA,sCAAuB;AAAA;;AAAA,cAAXpF,IAAW,uEAAJ,EAAI;;AAAA;;AACnB,qCAAMA,IAAN;AACA,iBAAKyE,IAAL,GAAYI,aAAa,CAACQ,cAA1B;AAFmB;AAGtB;AACD;;;;;;;;kCAImB;AAAA,gBAAb9E,MAAa,uEAAJ,EAAI;AACf;AACA;AACA,mBAAO,IAAI6E,kBAAJ,CAAuB;AAC1B7G,qBAAO,EAAEgC,MAAM,CAAChC,OAAP,IAAkB,KAAKA,OADN;AAE1B0G,oBAAM,EAAE1E,MAAM,CAAC0E,MAAP,KAAkBrE,SAAlB,GAA8BL,MAAM,CAAC0E,MAArC,GAA8C,KAAKA,MAFjC;AAG1BC,wBAAU,EAAE3E,MAAM,CAAC2E,UAAP,IAAqB,KAAKA,UAHZ;AAI1BvB,iBAAG,EAAEpD,MAAM,CAACoD,GAAP,IAAc,KAAKA,GAAnB,IAA0B/C;AAJL,aAAvB,CAAP;AAMH;;;;QArB4BkE,gB;AAuBjC;;;;;;;;;;;UASMQ,Y;;;;;AACF;;;AAGA,gCAAuB;AAAA;;AAAA,cAAXtF,IAAW,uEAAJ,EAAI;;AAAA;;AACnB,sCAAMA,IAAN;AACA,iBAAKyE,IAAL,GAAYI,aAAa,CAACU,QAA1B;AACA,iBAAKzB,IAAL,GAAY9D,IAAI,CAAC8D,IAAL,KAAclD,SAAd,GAA0BZ,IAAI,CAAC8D,IAA/B,GAAsC,IAAlD;AAHmB;AAItB;;;;kCACkB;AAAA,gBAAbvD,MAAa,uEAAJ,EAAI;AACf,mBAAO,IAAI+E,YAAJ,CAAiB;AACpBxB,kBAAI,EAAGvD,MAAM,CAACuD,IAAP,KAAgBlD,SAAjB,GAA8BL,MAAM,CAACuD,IAArC,GAA4C,KAAKA,IADnC;AAEpBvF,qBAAO,EAAEgC,MAAM,CAAChC,OAAP,IAAkB,KAAKA,OAFZ;AAGpB0G,oBAAM,EAAG1E,MAAM,CAAC0E,MAAP,KAAkBrE,SAAnB,GAAgCL,MAAM,CAAC0E,MAAvC,GAAgD,KAAKA,MAHzC;AAIpBC,wBAAU,EAAE3E,MAAM,CAAC2E,UAAP,IAAqB,KAAKA,UAJlB;AAKpBvB,iBAAG,EAAEpD,MAAM,CAACoD,GAAP,IAAc,KAAKA,GAAnB,IAA0B/C;AALX,aAAjB,CAAP;AAOH;;;;QAjBsBkE,gB;AAmB3B;;;;;;;;;;;;;;;UAaMU,iB;;;;;AACF,mCAAYxF,IAAZ,EAAkB;AAAA;;AAAA;;AACd;AACA,uCAAMA,IAAN,EAAY,CAAZ,EAAe,eAAf;AACA,kBAAKf,IAAL,GAAY,mBAAZ;AACA;;;;AAGA,kBAAKkG,EAAL,GAAU,KAAV,CAPc,CAQd;AACA;AACA;;AACA,cAAI,QAAKF,MAAL,IAAe,GAAf,IAAsB,QAAKA,MAAL,GAAc,GAAxC,EAA6C;AACzC,oBAAKQ,OAAL,6CAAkDzF,IAAI,CAAC2D,GAAL,IAAY,eAA9D;AACH,WAFD,MAGK;AACD,oBAAK8B,OAAL,uCAA4CzF,IAAI,CAAC2D,GAAL,IAAY,eAAxD,eAA4E3D,IAAI,CAACiF,MAAjF,cAA2FjF,IAAI,CAACkF,UAAhG;AACH;;AACD,kBAAKQ,KAAL,GAAa1F,IAAI,CAAC0F,KAAL,IAAc,IAA3B;AAjBc;AAkBjB;;;QAnB2BZ,gB;AAsBhC;;;;;;;;AAOA;;;;;;;;;;;;AAUA,eAASa,OAAT,CAAiBxD,OAAjB,EAA0B2B,IAA1B,EAAgC;AAC5B,eAAO;AACHA,cAAI,EAAJA,IADG;AAEHvF,iBAAO,EAAE4D,OAAO,CAAC5D,OAFd;AAGHqH,iBAAO,EAAEzD,OAAO,CAACyD,OAHd;AAIHpE,gBAAM,EAAEW,OAAO,CAACX,MAJb;AAKHuC,wBAAc,EAAE5B,OAAO,CAAC4B,cALrB;AAMHE,sBAAY,EAAE9B,OAAO,CAAC8B,YANnB;AAOHD,yBAAe,EAAE7B,OAAO,CAAC6B;AAPtB,SAAP;AASH;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UA8CM6B,U;AACF,4BAAYC,OAAZ,EAAqB;AAAA;;AACjB,eAAKA,OAAL,GAAeA,OAAf;AACH;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kCA0BQC,K,EAAOpC,G,EAAmB;AAAA;;AAAA,gBAAdxB,OAAc,uEAAJ,EAAI;AAC9B,gBAAI6D,GAAJ,CAD8B,CAE9B;;AACA,gBAAID,KAAK,YAAYrC,WAArB,EAAkC;AAC9B;AACA;AACAsC,iBAAG,GAAGD,KAAN;AACH,aAJD,MAKK;AACD;AACA;AACA;AACA;AACA,kBAAIxH,OAAO,GAAGqC,SAAd;;AACA,kBAAIuB,OAAO,CAAC5D,OAAR,YAA2BD,WAA/B,EAA4C;AACxCC,uBAAO,GAAG4D,OAAO,CAAC5D,OAAlB;AACH,eAFD,MAGK;AACDA,uBAAO,GAAG,IAAID,WAAJ,CAAgB6D,OAAO,CAAC5D,OAAxB,CAAV;AACH,eAXA,CAYD;;;AACA,kBAAIiD,MAAM,GAAGZ,SAAb;;AACA,kBAAI,CAAC,CAACuB,OAAO,CAACX,MAAd,EAAsB;AAClB,oBAAIW,OAAO,CAACX,MAAR,YAA0BU,UAA9B,EAA0C;AACtCV,wBAAM,GAAGW,OAAO,CAACX,MAAjB;AACH,iBAFD,MAGK;AACDA,wBAAM,GAAG,IAAIU,UAAJ,CAAe;AAAEM,8BAAU,EAAEL,OAAO,CAACX;AAAtB,mBAAf,CAAT;AACH;AACJ,eArBA,CAsBD;;;AACAwE,iBAAG,GAAG,IAAItC,WAAJ,CAAgBqC,KAAhB,EAAuBpC,GAAvB,EAA6BxB,OAAO,CAAC2B,IAAR,KAAiBlD,SAAjB,GAA6BuB,OAAO,CAAC2B,IAArC,GAA4C,IAAzE,EAAgF;AAClFvF,uBAAO,EAAPA,OADkF;AAElFiD,sBAAM,EAANA,MAFkF;AAGlFuC,8BAAc,EAAE5B,OAAO,CAAC4B,cAH0D;AAIlF;AACAE,4BAAY,EAAE9B,OAAO,CAAC8B,YAAR,IAAwB,MAL4C;AAMlFD,+BAAe,EAAE7B,OAAO,CAAC6B;AANyD,eAAhF,CAAN;AAQH,aAvC6B,CAwC9B;AACA;AACA;AACA;;;AACA,gBAAMiC,OAAO,GAAG,gDAAGD,GAAH,EAAQE,IAAR,CAAa,iEAAU,UAACF,GAAD;AAAA,qBAAS,OAAI,CAACF,OAAL,CAAaK,MAAb,CAAoBH,GAApB,CAAT;AAAA,aAAV,CAAb,CAAhB,CA5C8B,CA6C9B;AACA;AACA;;AACA,gBAAID,KAAK,YAAYrC,WAAjB,IAAgCvB,OAAO,CAACyD,OAAR,KAAoB,QAAxD,EAAkE;AAC9D,qBAAOK,OAAP;AACH,aAlD6B,CAmD9B;AACA;AACA;;;AACA,gBAAMG,IAAI,GAAGH,OAAO,CAACC,IAAR,CAAa,8DAAO,UAACG,KAAD;AAAA,qBAAWA,KAAK,YAAYf,YAA5B;AAAA,aAAP,CAAb,CAAb,CAtD8B,CAuD9B;;AACA,oBAAQnD,OAAO,CAACyD,OAAR,IAAmB,MAA3B;AACI,mBAAK,MAAL;AACI;AACA;AACA;AACA;AACA;AACA,wBAAQI,GAAG,CAAC/B,YAAZ;AACI,uBAAK,aAAL;AACI,2BAAOmC,IAAI,CAACF,IAAL,CAAU,2DAAI,UAACvD,GAAD,EAAS;AAC1B;AACA,0BAAIA,GAAG,CAACmB,IAAJ,KAAa,IAAb,IAAqB,EAAEnB,GAAG,CAACmB,IAAJ,YAAoBT,WAAtB,CAAzB,EAA6D;AACzD,8BAAM,IAAIZ,KAAJ,CAAU,iCAAV,CAAN;AACH;;AACD,6BAAOE,GAAG,CAACmB,IAAX;AACH,qBANgB,CAAV,CAAP;;AAOJ,uBAAK,MAAL;AACI,2BAAOsC,IAAI,CAACF,IAAL,CAAU,2DAAI,UAACvD,GAAD,EAAS;AAC1B;AACA,0BAAIA,GAAG,CAACmB,IAAJ,KAAa,IAAb,IAAqB,EAAEnB,GAAG,CAACmB,IAAJ,YAAoBP,IAAtB,CAAzB,EAAsD;AAClD,8BAAM,IAAId,KAAJ,CAAU,yBAAV,CAAN;AACH;;AACD,6BAAOE,GAAG,CAACmB,IAAX;AACH,qBANgB,CAAV,CAAP;;AAOJ,uBAAK,MAAL;AACI,2BAAOsC,IAAI,CAACF,IAAL,CAAU,2DAAI,UAACvD,GAAD,EAAS;AAC1B;AACA,0BAAIA,GAAG,CAACmB,IAAJ,KAAa,IAAb,IAAqB,OAAOnB,GAAG,CAACmB,IAAX,KAAoB,QAA7C,EAAuD;AACnD,8BAAM,IAAIrB,KAAJ,CAAU,2BAAV,CAAN;AACH;;AACD,6BAAOE,GAAG,CAACmB,IAAX;AACH,qBANgB,CAAV,CAAP;;AAOJ,uBAAK,MAAL;AACA;AACI;AACA,2BAAOsC,IAAI,CAACF,IAAL,CAAU,2DAAI,UAACvD,GAAD;AAAA,6BAASA,GAAG,CAACmB,IAAb;AAAA,qBAAJ,CAAV,CAAP;AA5BR;;AA8BJ,mBAAK,UAAL;AACI;AACA,uBAAOsC,IAAP;;AACJ;AACI;AACA,sBAAM,IAAI3D,KAAJ,+CAAiDN,OAAO,CAACyD,OAAzD,OAAN;AA1CR;AA4CH;AACD;;;;;;;;;;;;kCASOjC,G,EAAmB;AAAA,gBAAdxB,OAAc,uEAAJ,EAAI;AACtB,mBAAO,KAAKmE,OAAL,CAAa,QAAb,EAAuB3C,GAAvB,EAA4BxB,OAA5B,CAAP;AACH;AACD;;;;;;;;8BAKIwB,G,EAAmB;AAAA,gBAAdxB,OAAc,uEAAJ,EAAI;AACnB,mBAAO,KAAKmE,OAAL,CAAa,KAAb,EAAoB3C,GAApB,EAAyBxB,OAAzB,CAAP;AACH;AACD;;;;;;;;;;+BAOKwB,G,EAAmB;AAAA,gBAAdxB,OAAc,uEAAJ,EAAI;AACpB,mBAAO,KAAKmE,OAAL,CAAa,MAAb,EAAqB3C,GAArB,EAA0BxB,OAA1B,CAAP;AACH;AACD;;;;;;;;;;;;;;;;;;;;;gCAkBMwB,G,EAAK4C,a,EAAe;AACtB,mBAAO,KAAKD,OAAL,CAAa,OAAb,EAAsB3C,GAAtB,EAA2B;AAC9BnC,oBAAM,EAAE,IAAIU,UAAJ,GAAiBsE,MAAjB,CAAwBD,aAAxB,EAAuC,gBAAvC,CADsB;AAE9BX,qBAAO,EAAE,MAFqB;AAG9B3B,0BAAY,EAAE;AAHgB,aAA3B,CAAP;AAKH;AACD;;;;;;;;;;kCAOQN,G,EAAmB;AAAA,gBAAdxB,QAAc,uEAAJ,EAAI;;AACvB,mBAAO,KAAKmE,OAAL,CAAa,SAAb,EAAwB3C,GAAxB,EAA6BxB,QAA7B,CAAP;AACH;AACD;;;;;;;;gCAKMwB,G,EAAKG,I,EAAoB;AAAA,gBAAd3B,OAAc,uEAAJ,EAAI;AAC3B,mBAAO,KAAKmE,OAAL,CAAa,OAAb,EAAsB3C,GAAtB,EAA2BgC,OAAO,CAACxD,OAAD,EAAU2B,IAAV,CAAlC,CAAP;AACH;AACD;;;;;;;;;+BAMKH,G,EAAKG,I,EAAoB;AAAA,gBAAd3B,OAAc,uEAAJ,EAAI;AAC1B,mBAAO,KAAKmE,OAAL,CAAa,MAAb,EAAqB3C,GAArB,EAA0BgC,OAAO,CAACxD,OAAD,EAAU2B,IAAV,CAAjC,CAAP;AACH;AACD;;;;;;;;;8BAMIH,G,EAAKG,I,EAAoB;AAAA,gBAAd3B,OAAc,uEAAJ,EAAI;AACzB,mBAAO,KAAKmE,OAAL,CAAa,KAAb,EAAoB3C,GAApB,EAAyBgC,OAAO,CAACxD,OAAD,EAAU2B,IAAV,CAAhC,CAAP;AACH;;;;;;AAEL+B,gBAAU,CAACY,IAAX,GAAkB,SAASC,kBAAT,CAA4BC,CAA5B,EAA+B;AAAE,eAAO,KAAKA,CAAC,IAAId,UAAV,EAAsB,uDAAgBzH,WAAhB,CAAtB,CAAP;AAA6D,OAAhH;;AACAyH,gBAAU,CAACe,KAAX,GAAmB,iEAA0B;AAAEC,aAAK,EAAEhB,UAAT;AAAqBiB,eAAO,EAAEjB,UAAU,CAACY;AAAzC,OAA1B,CAAnB;;AACAZ,gBAAU,CAACkB,cAAX,GAA4B;AAAA,eAAM,CAC9B;AAAEtC,cAAI,EAAErG;AAAR,SAD8B,CAAN;AAAA,OAA5B;AAGA;;;AAAc,OAAC,YAAY;AAAE,wEAAyByH,UAAzB,EAAqC,CAAC;AAC3DpB,cAAI,EAAE;AADqD,SAAD,CAArC,EAErB,YAAY;AAAE,iBAAO,CAAC;AAAEA,gBAAI,EAAErG;AAAR,WAAD,CAAP;AAAiC,SAF1B,EAE4B,IAF5B;AAEoC,OAFnD;AAId;;;;;;;;AAOA;;;;;;;UAKM4I,sB;AACF,wCAAYC,IAAZ,EAAkBC,WAAlB,EAA+B;AAAA;;AAC3B,eAAKD,IAAL,GAAYA,IAAZ;AACA,eAAKC,WAAL,GAAmBA,WAAnB;AACH;;;;iCACMlB,G,EAAK;AACR,mBAAO,KAAKkB,WAAL,CAAiBC,SAAjB,CAA2BnB,GAA3B,EAAgC,KAAKiB,IAArC,CAAP;AACH;;;;;AAEL;;;;;;;;AAMA,UAAMG,iBAAiB,GAAG,IAAI,4DAAJ,CAAmB,mBAAnB,CAA1B;;UACMC,e;;;;;;;oCACQrB,G,EAAKiB,I,EAAM;AACjB,mBAAOA,IAAI,CAACd,MAAL,CAAYH,GAAZ,CAAP;AACH;;;;;;AAELqB,qBAAe,CAACZ,IAAhB,GAAuB,SAASa,uBAAT,CAAiCX,CAAjC,EAAoC;AAAE,eAAO,KAAKA,CAAC,IAAIU,eAAV,GAAP;AAAsC,OAAnG;;AACAA,qBAAe,CAACT,KAAhB,GAAwB,iEAA0B;AAAEC,aAAK,EAAEQ,eAAT;AAA0BP,eAAO,EAAEO,eAAe,CAACZ;AAAnD,OAA1B,CAAxB;AACA;;AAAc,OAAC,YAAY;AAAE,wEAAyBY,eAAzB,EAA0C,CAAC;AAChE5C,cAAI,EAAE;AAD0D,SAAD,CAA1C,EAErB,IAFqB,EAEf,IAFe;AAEP,OAFR;AAId;;;;;;;AAOA;AACA;AACA;AACA;;;AACA,UAAI8C,aAAa,GAAG,CAApB,C,CACA;AACA;;AACA,UAAMC,qBAAqB,GAAG,gDAA9B,C,CACA;AACA;;AACA,UAAMC,sBAAsB,GAAG,+CAA/B;AACA,UAAMC,6BAA6B,GAAG,6CAAtC;AACA;;;;;;;;UAOMC,oB;;;AAEN;;;;;;;;;;UAQMC,kB;AACF,oCAAYC,WAAZ,EAAyBC,QAAzB,EAAmC;AAAA;;AAC/B,eAAKD,WAAL,GAAmBA,WAAnB;AACA,eAAKC,QAAL,GAAgBA,QAAhB;AACH;AACD;;;;;;;yCAGe;AACX,+CAA4BP,aAAa,EAAzC;AACH;AACD;;;;;;;;;iCAMOvB,G,EAAK;AAAA;;AACR;AACA;AACA,gBAAIA,GAAG,CAAC7C,MAAJ,KAAe,OAAnB,EAA4B;AACxB,oBAAM,IAAIV,KAAJ,CAAUgF,sBAAV,CAAN;AACH,aAFD,MAGK,IAAIzB,GAAG,CAAC/B,YAAJ,KAAqB,MAAzB,EAAiC;AAClC,oBAAM,IAAIxB,KAAJ,CAAUiF,6BAAV,CAAN;AACH,aARO,CASR;;;AACA,mBAAO,IAAI,+CAAJ,CAAe,UAACK,QAAD,EAAc;AAChC;AACA;AACA;AACA,kBAAMC,QAAQ,GAAG,OAAI,CAACC,YAAL,EAAjB;;AACA,kBAAMtE,GAAG,GAAGqC,GAAG,CAAC7B,aAAJ,CAAkBlC,OAAlB,CAA0B,sBAA1B,aAAsD+F,QAAtD,QAAZ,CALgC,CAMhC;;AACA,kBAAME,IAAI,GAAG,OAAI,CAACJ,QAAL,CAAcK,aAAd,CAA4B,QAA5B,CAAb;;AACAD,kBAAI,CAACE,GAAL,GAAWzE,GAAX,CARgC,CAShC;AACA;AACA;;AACA,kBAAIG,IAAI,GAAG,IAAX,CAZgC,CAahC;;AACA,kBAAIuE,QAAQ,GAAG,KAAf,CAdgC,CAehC;AACA;;AACA,kBAAIC,SAAS,GAAG,KAAhB,CAjBgC,CAkBhC;AACA;AACA;;AACA,qBAAI,CAACT,WAAL,CAAiBG,QAAjB,IAA6B,UAACO,IAAD,EAAU;AACnC;AACA,uBAAO,OAAI,CAACV,WAAL,CAAiBG,QAAjB,CAAP,CAFmC,CAGnC;;AACA,oBAAIM,SAAJ,EAAe;AACX;AACH,iBANkC,CAOnC;;;AACAxE,oBAAI,GAAGyE,IAAP;AACAF,wBAAQ,GAAG,IAAX;AACH,eAVD,CArBgC,CAgChC;AACA;AACA;;;AACA,kBAAMG,OAAO,GAAG,SAAVA,OAAU,GAAM;AAClB;AACA,oBAAIN,IAAI,CAACO,UAAT,EAAqB;AACjBP,sBAAI,CAACO,UAAL,CAAgBC,WAAhB,CAA4BR,IAA5B;AACH,iBAJiB,CAKlB;AACA;;;AACA,uBAAO,OAAI,CAACL,WAAL,CAAiBG,QAAjB,CAAP;AACH,eARD,CAnCgC,CA4ChC;AACA;AACA;AACA;;;AACA,kBAAMW,MAAM,GAAG,SAATA,MAAS,CAACtC,KAAD,EAAW;AACtB;AACA,oBAAIiC,SAAJ,EAAe;AACX;AACH,iBAJqB,CAKtB;;;AACAE,uBAAO,GANe,CAOtB;;AACA,oBAAI,CAACH,QAAL,EAAe;AACX;AACA;AACAN,0BAAQ,CAACrC,KAAT,CAAe,IAAIF,iBAAJ,CAAsB;AACjC7B,uBAAG,EAAHA,GADiC;AAEjCsB,0BAAM,EAAE,CAFyB;AAGjCC,8BAAU,EAAE,aAHqB;AAIjCQ,yBAAK,EAAE,IAAIjD,KAAJ,CAAU+E,qBAAV;AAJ0B,mBAAtB,CAAf;AAMA;AACH,iBAlBqB,CAmBtB;AACA;;;AACAO,wBAAQ,CAACd,IAAT,CAAc,IAAI3B,YAAJ,CAAiB;AAC3BxB,sBAAI,EAAJA,IAD2B;AAE3BmB,wBAAM,EAAE,GAFmB;AAG3BC,4BAAU,EAAE,IAHe;AAI3BvB,qBAAG,EAAHA;AAJ2B,iBAAjB,CAAd,EArBsB,CA2BtB;;AACAoE,wBAAQ,CAACa,QAAT;AACH,eA7BD,CAhDgC,CA8EhC;AACA;AACA;;;AACA,kBAAMC,OAAO,GAAG,SAAVA,OAAU,CAACnD,KAAD,EAAW;AACvB;AACA,oBAAI4C,SAAJ,EAAe;AACX;AACH;;AACDE,uBAAO,GALgB,CAMvB;;AACAT,wBAAQ,CAACrC,KAAT,CAAe,IAAIF,iBAAJ,CAAsB;AACjCE,uBAAK,EAALA,KADiC;AAEjCT,wBAAM,EAAE,CAFyB;AAGjCC,4BAAU,EAAE,aAHqB;AAIjCvB,qBAAG,EAAHA;AAJiC,iBAAtB,CAAf;AAMH,eAbD,CAjFgC,CA+FhC;AACA;;;AACAuE,kBAAI,CAACY,gBAAL,CAAsB,MAAtB,EAA8BH,MAA9B;AACAT,kBAAI,CAACY,gBAAL,CAAsB,OAAtB,EAA+BD,OAA/B;;AACA,qBAAI,CAACf,QAAL,CAAchE,IAAd,CAAmBiF,WAAnB,CAA+Bb,IAA/B,EAnGgC,CAoGhC;;;AACAH,sBAAQ,CAACd,IAAT,CAAc;AAAExC,oBAAI,EAAEI,aAAa,CAACmE;AAAtB,eAAd,EArGgC,CAsGhC;;AACA,qBAAO,YAAM;AACT;AACAV,yBAAS,GAAG,IAAZ,CAFS,CAGT;;AACAJ,oBAAI,CAACe,mBAAL,CAAyB,MAAzB,EAAiCN,MAAjC;AACAT,oBAAI,CAACe,mBAAL,CAAyB,OAAzB,EAAkCJ,OAAlC,EALS,CAMT;;AACAL,uBAAO;AACV,eARD;AASH,aAhHM,CAAP;AAiHH;;;;;;AAELZ,wBAAkB,CAACnB,IAAnB,GAA0B,SAASyC,0BAAT,CAAoCvC,CAApC,EAAuC;AAAE,eAAO,KAAKA,CAAC,IAAIiB,kBAAV,EAA8B,uDAAgBD,oBAAhB,CAA9B,EAAqE,uDAAgB,wDAAhB,CAArE,CAAP;AAAyG,OAA5K;;AACAC,wBAAkB,CAAChB,KAAnB,GAA2B,iEAA0B;AAAEC,aAAK,EAAEe,kBAAT;AAA6Bd,eAAO,EAAEc,kBAAkB,CAACnB;AAAzD,OAA1B,CAA3B;;AACAmB,wBAAkB,CAACb,cAAnB,GAAoC;AAAA,eAAM,CACtC;AAAEtC,cAAI,EAAEkD;AAAR,SADsC,EAEtC;AAAElD,cAAI,EAAE7D,SAAR;AAAmBuI,oBAAU,EAAE,CAAC;AAAE1E,gBAAI,EAAE,oDAAR;AAAgB2E,gBAAI,EAAE,CAAC,wDAAD;AAAtB,WAAD;AAA/B,SAFsC,CAAN;AAAA,OAApC;AAIA;;;AAAc,OAAC,YAAY;AAAE,wEAAyBxB,kBAAzB,EAA6C,CAAC;AACnEnD,cAAI,EAAE;AAD6D,SAAD,CAA7C,EAErB,YAAY;AAAE,iBAAO,CAAC;AAAEA,gBAAI,EAAEkD;AAAR,WAAD,EAAiC;AAAElD,gBAAI,EAAE7D,SAAR;AAAmBuI,sBAAU,EAAE,CAAC;AAC9E1E,kBAAI,EAAE,oDADwE;AAE9E2E,kBAAI,EAAE,CAAC,wDAAD;AAFwE,aAAD;AAA/B,WAAjC,CAAP;AAGF,SALS,EAKP,IALO;AAKC,OALhB;AAMd;;;;;;;;;;UAQMC,gB;AACF,kCAAYC,KAAZ,EAAmB;AAAA;;AACf,eAAKA,KAAL,GAAaA,KAAb;AACH;AACD;;;;;;;;;;;oCAOUtD,G,EAAKiB,I,EAAM;AACjB,gBAAIjB,GAAG,CAAC7C,MAAJ,KAAe,OAAnB,EAA4B;AACxB,qBAAO,KAAKmG,KAAL,CAAWnD,MAAX,CAAkBH,GAAlB,CAAP;AACH,aAHgB,CAIjB;;;AACA,mBAAOiB,IAAI,CAACd,MAAL,CAAYH,GAAZ,CAAP;AACH;;;;;;AAELqD,sBAAgB,CAAC5C,IAAjB,GAAwB,SAAS8C,wBAAT,CAAkC5C,CAAlC,EAAqC;AAAE,eAAO,KAAKA,CAAC,IAAI0C,gBAAV,EAA4B,uDAAgBzB,kBAAhB,CAA5B,CAAP;AAA0E,OAAzI;;AACAyB,sBAAgB,CAACzC,KAAjB,GAAyB,iEAA0B;AAAEC,aAAK,EAAEwC,gBAAT;AAA2BvC,eAAO,EAAEuC,gBAAgB,CAAC5C;AAArD,OAA1B,CAAzB;;AACA4C,sBAAgB,CAACtC,cAAjB,GAAkC;AAAA,eAAM,CACpC;AAAEtC,cAAI,EAAEmD;AAAR,SADoC,CAAN;AAAA,OAAlC;AAGA;;;AAAc,OAAC,YAAY;AAAE,wEAAyByB,gBAAzB,EAA2C,CAAC;AACjE5E,cAAI,EAAE;AAD2D,SAAD,CAA3C,EAErB,YAAY;AAAE,iBAAO,CAAC;AAAEA,gBAAI,EAAEmD;AAAR,WAAD,CAAP;AAAwC,SAFjC,EAEmC,IAFnC;AAE2C,OAF1D;AAId;;;;;;;;;AAOA,UAAM4B,WAAW,GAAG,cAApB;AACA;;;;;AAIA,eAASC,cAAT,CAAwBC,GAAxB,EAA6B;AACzB,YAAI,iBAAiBA,GAAjB,IAAwBA,GAAG,CAACC,WAAhC,EAA6C;AACzC,iBAAOD,GAAG,CAACC,WAAX;AACH;;AACD,YAAI,mBAAmBC,IAAnB,CAAwBF,GAAG,CAACG,qBAAJ,EAAxB,CAAJ,EAA0D;AACtD,iBAAOH,GAAG,CAACI,iBAAJ,CAAsB,eAAtB,CAAP;AACH;;AACD,eAAO,IAAP;AACH;AACD;;;;;;;UAKMC,U;;;AAEN;;;;;;UAIMC,U;AACF,8BAAc;AAAA;AAAG;;;;kCACT;AACJ,mBAAQ,IAAIC,cAAJ,EAAR;AACH;;;;;;AAELD,gBAAU,CAACvD,IAAX,GAAkB,SAASyD,kBAAT,CAA4BvD,CAA5B,EAA+B;AAAE,eAAO,KAAKA,CAAC,IAAIqD,UAAV,GAAP;AAAiC,OAApF;;AACAA,gBAAU,CAACpD,KAAX,GAAmB,iEAA0B;AAAEC,aAAK,EAAEmD,UAAT;AAAqBlD,eAAO,EAAEkD,UAAU,CAACvD;AAAzC,OAA1B,CAAnB;;AACAuD,gBAAU,CAACjD,cAAX,GAA4B;AAAA,eAAM,EAAN;AAAA,OAA5B;AACA;;;AAAc,OAAC,YAAY;AAAE,wEAAyBiD,UAAzB,EAAqC,CAAC;AAC3DvF,cAAI,EAAE;AADqD,SAAD,CAArC,EAErB,YAAY;AAAE,iBAAO,EAAP;AAAY,SAFL,EAEO,IAFP;AAEe,OAF9B;AAGd;;;;;;;;;UAOM0F,c;AACF,gCAAYC,UAAZ,EAAwB;AAAA;;AACpB,eAAKA,UAAL,GAAkBA,UAAlB;AACH;AACD;;;;;;;;;iCAKOpE,G,EAAK;AAAA;;AACR;AACA;AACA,gBAAIA,GAAG,CAAC7C,MAAJ,KAAe,OAAnB,EAA4B;AACxB,oBAAM,IAAIV,KAAJ,6EAAN;AACH,aALO,CAMR;;;AACA,mBAAO,IAAI,+CAAJ,CAAe,UAACsF,QAAD,EAAc;AAChC;AACA,kBAAM2B,GAAG,GAAG,OAAI,CAACU,UAAL,CAAgBC,KAAhB,EAAZ;;AACAX,iBAAG,CAACY,IAAJ,CAAStE,GAAG,CAAC7C,MAAb,EAAqB6C,GAAG,CAAC7B,aAAzB;;AACA,kBAAI,CAAC,CAAC6B,GAAG,CAAChC,eAAV,EAA2B;AACvB0F,mBAAG,CAAC1F,eAAJ,GAAsB,IAAtB;AACH,eAN+B,CAOhC;;;AACAgC,iBAAG,CAACzH,OAAJ,CAAYM,OAAZ,CAAoB,UAACI,IAAD,EAAOa,MAAP;AAAA,uBAAkB4J,GAAG,CAACa,gBAAJ,CAAqBtL,IAArB,EAA2Ba,MAAM,CAACiD,IAAP,CAAY,GAAZ,CAA3B,CAAlB;AAAA,eAApB,EARgC,CAShC;;AACA,kBAAI,CAACiD,GAAG,CAACzH,OAAJ,CAAYiB,GAAZ,CAAgB,QAAhB,CAAL,EAAgC;AAC5BkK,mBAAG,CAACa,gBAAJ,CAAqB,QAArB,EAA+B,mCAA/B;AACH,eAZ+B,CAahC;;;AACA,kBAAI,CAACvE,GAAG,CAACzH,OAAJ,CAAYiB,GAAZ,CAAgB,cAAhB,CAAL,EAAsC;AAClC,oBAAMgL,YAAY,GAAGxE,GAAG,CAACyE,uBAAJ,EAArB,CADkC,CAElC;;AACA,oBAAID,YAAY,KAAK,IAArB,EAA2B;AACvBd,qBAAG,CAACa,gBAAJ,CAAqB,cAArB,EAAqCC,YAArC;AACH;AACJ,eApB+B,CAqBhC;;;AACA,kBAAIxE,GAAG,CAAC/B,YAAR,EAAsB;AAClB,oBAAMA,YAAY,GAAG+B,GAAG,CAAC/B,YAAJ,CAAiB7E,WAAjB,EAArB,CADkB,CAElB;AACA;AACA;AACA;AACA;;AACAsK,mBAAG,CAACzF,YAAJ,GAAqBA,YAAY,KAAK,MAAlB,GAA4BA,YAA5B,GAA2C,MAA/D;AACH,eA9B+B,CA+BhC;;;AACA,kBAAMyG,OAAO,GAAG1E,GAAG,CAAC2E,aAAJ,EAAhB,CAhCgC,CAiChC;AACA;AACA;AACA;AACA;AACA;;AACA,kBAAIC,cAAc,GAAG,IAArB,CAvCgC,CAwChC;AACA;;AACA,kBAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AACzB,oBAAID,cAAc,KAAK,IAAvB,EAA6B;AACzB,yBAAOA,cAAP;AACH,iBAHwB,CAIzB;;;AACA,oBAAM3F,MAAM,GAAGyE,GAAG,CAACzE,MAAJ,KAAe,IAAf,GAAsB,GAAtB,GAA4ByE,GAAG,CAACzE,MAA/C;AACA,oBAAMC,UAAU,GAAGwE,GAAG,CAACxE,UAAJ,IAAkB,IAArC,CANyB,CAOzB;;AACA,oBAAM3G,OAAO,GAAG,IAAID,WAAJ,CAAgBoL,GAAG,CAACG,qBAAJ,EAAhB,CAAhB,CARyB,CASzB;AACA;;AACA,oBAAMlG,GAAG,GAAG8F,cAAc,CAACC,GAAD,CAAd,IAAuB1D,GAAG,CAACrC,GAAvC,CAXyB,CAYzB;;AACAiH,8BAAc,GAAG,IAAIxF,kBAAJ,CAAuB;AAAE7G,yBAAO,EAAPA,OAAF;AAAW0G,wBAAM,EAANA,MAAX;AAAmBC,4BAAU,EAAVA,UAAnB;AAA+BvB,qBAAG,EAAHA;AAA/B,iBAAvB,CAAjB;AACA,uBAAOiH,cAAP;AACH,eAfD,CA1CgC,CA0DhC;AACA;AACA;;;AACA,kBAAMjC,MAAM,GAAG,SAATA,MAAS,GAAM;AACjB;AADiB,sCAE0BkC,cAAc,EAFxC;AAAA,oBAEXtM,OAFW,mBAEXA,OAFW;AAAA,oBAEF0G,MAFE,mBAEFA,MAFE;AAAA,oBAEMC,UAFN,mBAEMA,UAFN;AAAA,oBAEkBvB,GAFlB,mBAEkBA,GAFlB,EAGjB;;;AACA,oBAAIG,IAAI,GAAG,IAAX;;AACA,oBAAImB,MAAM,KAAK,GAAf,EAAoB;AAChB;AACAnB,sBAAI,GAAI,OAAO4F,GAAG,CAACoB,QAAX,KAAwB,WAAzB,GAAwCpB,GAAG,CAACqB,YAA5C,GAA2DrB,GAAG,CAACoB,QAAtE;AACH,iBARgB,CASjB;;;AACA,oBAAI7F,MAAM,KAAK,CAAf,EAAkB;AACdA,wBAAM,GAAG,CAAC,CAACnB,IAAF,GAAS,GAAT,GAAe,CAAxB;AACH,iBAZgB,CAajB;AACA;AACA;AACA;;;AACA,oBAAIqB,EAAE,GAAGF,MAAM,IAAI,GAAV,IAAiBA,MAAM,GAAG,GAAnC,CAjBiB,CAkBjB;AACA;;AACA,oBAAIe,GAAG,CAAC/B,YAAJ,KAAqB,MAArB,IAA+B,OAAOH,IAAP,KAAgB,QAAnD,EAA6D;AACzD;AACA,sBAAMkH,YAAY,GAAGlH,IAArB;AACAA,sBAAI,GAAGA,IAAI,CAAC7B,OAAL,CAAauH,WAAb,EAA0B,EAA1B,CAAP;;AACA,sBAAI;AACA;AACA1F,wBAAI,GAAGA,IAAI,KAAK,EAAT,GAAcS,IAAI,CAAC0G,KAAL,CAAWnH,IAAX,CAAd,GAAiC,IAAxC;AACH,mBAHD,CAIA,OAAO4B,KAAP,EAAc;AACV;AACA;AACA;AACA5B,wBAAI,GAAGkH,YAAP,CAJU,CAKV;AACA;;AACA,wBAAI7F,EAAJ,EAAQ;AACJ;AACAA,wBAAE,GAAG,KAAL,CAFI,CAGJ;;AACArB,0BAAI,GAAG;AAAE4B,6BAAK,EAALA,KAAF;AAASwF,4BAAI,EAAEpH;AAAf,uBAAP;AACH;AACJ;AACJ;;AACD,oBAAIqB,EAAJ,EAAQ;AACJ;AACA4C,0BAAQ,CAACd,IAAT,CAAc,IAAI3B,YAAJ,CAAiB;AAC3BxB,wBAAI,EAAJA,IAD2B;AAE3BvF,2BAAO,EAAPA,OAF2B;AAG3B0G,0BAAM,EAANA,MAH2B;AAI3BC,8BAAU,EAAVA,UAJ2B;AAK3BvB,uBAAG,EAAEA,GAAG,IAAI/C;AALe,mBAAjB,CAAd,EAFI,CASJ;AACA;;AACAmH,0BAAQ,CAACa,QAAT;AACH,iBAZD,MAaK;AACD;AACAb,0BAAQ,CAACrC,KAAT,CAAe,IAAIF,iBAAJ,CAAsB;AACjC;AACAE,yBAAK,EAAE5B,IAF0B;AAGjCvF,2BAAO,EAAPA,OAHiC;AAIjC0G,0BAAM,EAANA,MAJiC;AAKjCC,8BAAU,EAAVA,UALiC;AAMjCvB,uBAAG,EAAEA,GAAG,IAAI/C;AANqB,mBAAtB,CAAf;AAQH;AACJ,eAnED,CA7DgC,CAiIhC;AACA;AACA;;;AACA,kBAAMiI,OAAO,GAAG,SAAVA,OAAU,CAACnD,KAAD,EAAW;AAAA,uCACPmF,cAAc,EADP;AAAA,oBACflH,GADe,oBACfA,GADe;;AAEvB,oBAAMhB,GAAG,GAAG,IAAI6C,iBAAJ,CAAsB;AAC9BE,uBAAK,EAALA,KAD8B;AAE9BT,wBAAM,EAAEyE,GAAG,CAACzE,MAAJ,IAAc,CAFQ;AAG9BC,4BAAU,EAAEwE,GAAG,CAACxE,UAAJ,IAAkB,eAHA;AAI9BvB,qBAAG,EAAEA,GAAG,IAAI/C;AAJkB,iBAAtB,CAAZ;AAMAmH,wBAAQ,CAACrC,KAAT,CAAe/C,GAAf;AACH,eATD,CApIgC,CA8IhC;AACA;AACA;AACA;;;AACA,kBAAIwI,WAAW,GAAG,KAAlB,CAlJgC,CAmJhC;AACA;;AACA,kBAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAC/E,KAAD,EAAW;AAC9B;AACA,oBAAI,CAAC8E,WAAL,EAAkB;AACdpD,0BAAQ,CAACd,IAAT,CAAc4D,cAAc,EAA5B;AACAM,6BAAW,GAAG,IAAd;AACH,iBAL6B,CAM9B;AACA;;;AACA,oBAAIE,aAAa,GAAG;AAChB5G,sBAAI,EAAEI,aAAa,CAACyG,gBADJ;AAEhBC,wBAAM,EAAElF,KAAK,CAACkF;AAFE,iBAApB,CAR8B,CAY9B;;AACA,oBAAIlF,KAAK,CAACmF,gBAAV,EAA4B;AACxBH,+BAAa,CAACI,KAAd,GAAsBpF,KAAK,CAACoF,KAA5B;AACH,iBAf6B,CAgB9B;AACA;AACA;;;AACA,oBAAIzF,GAAG,CAAC/B,YAAJ,KAAqB,MAArB,IAA+B,CAAC,CAACyF,GAAG,CAACqB,YAAzC,EAAuD;AACnDM,+BAAa,CAACK,WAAd,GAA4BhC,GAAG,CAACqB,YAAhC;AACH,iBArB6B,CAsB9B;;;AACAhD,wBAAQ,CAACd,IAAT,CAAcoE,aAAd;AACH,eAxBD,CArJgC,CA8KhC;AACA;;;AACA,kBAAMM,YAAY,GAAG,SAAfA,YAAe,CAACtF,KAAD,EAAW;AAC5B;AACA;AACA,oBAAIuF,QAAQ,GAAG;AACXnH,sBAAI,EAAEI,aAAa,CAACgH,cADT;AAEXN,wBAAM,EAAElF,KAAK,CAACkF;AAFH,iBAAf,CAH4B,CAO5B;AACA;;AACA,oBAAIlF,KAAK,CAACmF,gBAAV,EAA4B;AACxBI,0BAAQ,CAACH,KAAT,GAAiBpF,KAAK,CAACoF,KAAvB;AACH,iBAX2B,CAY5B;;;AACA1D,wBAAQ,CAACd,IAAT,CAAc2E,QAAd;AACH,eAdD,CAhLgC,CA+LhC;;;AACAlC,iBAAG,CAACZ,gBAAJ,CAAqB,MAArB,EAA6BH,MAA7B;AACAe,iBAAG,CAACZ,gBAAJ,CAAqB,OAArB,EAA8BD,OAA9B,EAjMgC,CAkMhC;;AACA,kBAAI7C,GAAG,CAACjC,cAAR,EAAwB;AACpB;AACA2F,mBAAG,CAACZ,gBAAJ,CAAqB,UAArB,EAAiCsC,cAAjC,EAFoB,CAGpB;;AACA,oBAAIV,OAAO,KAAK,IAAZ,IAAoBhB,GAAG,CAACoC,MAA5B,EAAoC;AAChCpC,qBAAG,CAACoC,MAAJ,CAAWhD,gBAAX,CAA4B,UAA5B,EAAwC6C,YAAxC;AACH;AACJ,eA1M+B,CA2MhC;;;AACAjC,iBAAG,CAACqC,IAAJ,CAASrB,OAAT;AACA3C,sBAAQ,CAACd,IAAT,CAAc;AAAExC,oBAAI,EAAEI,aAAa,CAACmE;AAAtB,eAAd,EA7MgC,CA8MhC;AACA;;AACA,qBAAO,YAAM;AACT;AACAU,mBAAG,CAACT,mBAAJ,CAAwB,OAAxB,EAAiCJ,OAAjC;AACAa,mBAAG,CAACT,mBAAJ,CAAwB,MAAxB,EAAgCN,MAAhC;;AACA,oBAAI3C,GAAG,CAACjC,cAAR,EAAwB;AACpB2F,qBAAG,CAACT,mBAAJ,CAAwB,UAAxB,EAAoCmC,cAApC;;AACA,sBAAIV,OAAO,KAAK,IAAZ,IAAoBhB,GAAG,CAACoC,MAA5B,EAAoC;AAChCpC,uBAAG,CAACoC,MAAJ,CAAW7C,mBAAX,CAA+B,UAA/B,EAA2C0C,YAA3C;AACH;AACJ,iBATQ,CAUT;;;AACA,oBAAIjC,GAAG,CAACsC,UAAJ,KAAmBtC,GAAG,CAACuC,IAA3B,EAAiC;AAC7BvC,qBAAG,CAACwC,KAAJ;AACH;AACJ,eAdD;AAeH,aA/NM,CAAP;AAgOH;;;;;;AAEL/B,oBAAc,CAAC1D,IAAf,GAAsB,SAAS0F,sBAAT,CAAgCxF,CAAhC,EAAmC;AAAE,eAAO,KAAKA,CAAC,IAAIwD,cAAV,EAA0B,uDAAgBJ,UAAhB,CAA1B,CAAP;AAAgE,OAA3H;;AACAI,oBAAc,CAACvD,KAAf,GAAuB,iEAA0B;AAAEC,aAAK,EAAEsD,cAAT;AAAyBrD,eAAO,EAAEqD,cAAc,CAAC1D;AAAjD,OAA1B,CAAvB;;AACA0D,oBAAc,CAACpD,cAAf,GAAgC;AAAA,eAAM,CAClC;AAAEtC,cAAI,EAAEsF;AAAR,SADkC,CAAN;AAAA,OAAhC;AAGA;;;AAAc,OAAC,YAAY;AAAE,wEAAyBI,cAAzB,EAAyC,CAAC;AAC/D1F,cAAI,EAAE;AADyD,SAAD,CAAzC,EAErB,YAAY;AAAE,iBAAO,CAAC;AAAEA,gBAAI,EAAEsF;AAAR,WAAD,CAAP;AAAgC,SAFzB,EAE2B,IAF3B;AAEmC,OAFlD;AAId;;;;;;;;;AAOA,UAAMqC,gBAAgB,GAAG,IAAI,4DAAJ,CAAmB,kBAAnB,CAAzB;AACA,UAAMC,gBAAgB,GAAG,IAAI,4DAAJ,CAAmB,kBAAnB,CAAzB;AACA;;;;;;UAKMC,sB;;;AAEN;;;;;UAGMC,uB;AACF,yCAAYC,GAAZ,EAAiBC,QAAjB,EAA2BC,UAA3B,EAAuC;AAAA;;AACnC,eAAKF,GAAL,GAAWA,GAAX;AACA,eAAKC,QAAL,GAAgBA,QAAhB;AACA,eAAKC,UAAL,GAAkBA,UAAlB;AACA,eAAKC,gBAAL,GAAwB,EAAxB;AACA,eAAKC,SAAL,GAAiB,IAAjB;AACA;;;;AAGA,eAAKC,UAAL,GAAkB,CAAlB;AACH;;;;qCACU;AACP,gBAAI,KAAKJ,QAAL,KAAkB,QAAtB,EAAgC;AAC5B,qBAAO,IAAP;AACH;;AACD,gBAAMK,YAAY,GAAG,KAAKN,GAAL,CAASO,MAAT,IAAmB,EAAxC;;AACA,gBAAID,YAAY,KAAK,KAAKH,gBAA1B,EAA4C;AACxC,mBAAKE,UAAL;AACA,mBAAKD,SAAL,GAAiB,0EAAkBE,YAAlB,EAAgC,KAAKJ,UAArC,CAAjB;AACA,mBAAKC,gBAAL,GAAwBG,YAAxB;AACH;;AACD,mBAAO,KAAKF,SAAZ;AACH;;;;;;AAELL,6BAAuB,CAAC9F,IAAxB,GAA+B,SAASuG,+BAAT,CAAyCrG,CAAzC,EAA4C;AAAE,eAAO,KAAKA,CAAC,IAAI4F,uBAAV,EAAmC,uDAAgB,wDAAhB,CAAnC,EAA8D,uDAAgB,yDAAhB,CAA9D,EAA4F,uDAAgBH,gBAAhB,CAA5F,CAAP;AAAwI,OAArN;;AACAG,6BAAuB,CAAC3F,KAAxB,GAAgC,iEAA0B;AAAEC,aAAK,EAAE0F,uBAAT;AAAkCzF,eAAO,EAAEyF,uBAAuB,CAAC9F;AAAnE,OAA1B,CAAhC;;AACA8F,6BAAuB,CAACxF,cAAxB,GAAyC;AAAA,eAAM,CAC3C;AAAEtC,cAAI,EAAE7D,SAAR;AAAmBuI,oBAAU,EAAE,CAAC;AAAE1E,gBAAI,EAAE,oDAAR;AAAgB2E,gBAAI,EAAE,CAAC,wDAAD;AAAtB,WAAD;AAA/B,SAD2C,EAE3C;AAAE3E,cAAI,EAAEwI,MAAR;AAAgB9D,oBAAU,EAAE,CAAC;AAAE1E,gBAAI,EAAE,oDAAR;AAAgB2E,gBAAI,EAAE,CAAC,yDAAD;AAAtB,WAAD;AAA5B,SAF2C,EAG3C;AAAE3E,cAAI,EAAEwI,MAAR;AAAgB9D,oBAAU,EAAE,CAAC;AAAE1E,gBAAI,EAAE,oDAAR;AAAgB2E,gBAAI,EAAE,CAACgD,gBAAD;AAAtB,WAAD;AAA5B,SAH2C,CAAN;AAAA,OAAzC;AAKA;;;AAAc,OAAC,YAAY;AAAE,wEAAyBG,uBAAzB,EAAkD,CAAC;AACxE9H,cAAI,EAAE;AADkE,SAAD,CAAlD,EAErB,YAAY;AAAE,iBAAO,CAAC;AAAEA,gBAAI,EAAE7D,SAAR;AAAmBuI,sBAAU,EAAE,CAAC;AAC9C1E,kBAAI,EAAE,oDADwC;AAE9C2E,kBAAI,EAAE,CAAC,wDAAD;AAFwC,aAAD;AAA/B,WAAD,EAGX;AAAE3E,gBAAI,EAAEwI,MAAR;AAAgB9D,sBAAU,EAAE,CAAC;AAC/B1E,kBAAI,EAAE,oDADyB;AAE/B2E,kBAAI,EAAE,CAAC,yDAAD;AAFyB,aAAD;AAA5B,WAHW,EAMX;AAAE3E,gBAAI,EAAEwI,MAAR;AAAgB9D,sBAAU,EAAE,CAAC;AAC/B1E,kBAAI,EAAE,oDADyB;AAE/B2E,kBAAI,EAAE,CAACgD,gBAAD;AAFyB,aAAD;AAA5B,WANW,CAAP;AASF,SAXS,EAWP,IAXO;AAWC,OAXhB;AAYd;;;;;UAGMc,mB;AACF,qCAAYC,YAAZ,EAA0BC,UAA1B,EAAsC;AAAA;;AAClC,eAAKD,YAAL,GAAoBA,YAApB;AACA,eAAKC,UAAL,GAAkBA,UAAlB;AACH;;;;oCACSpH,G,EAAKiB,I,EAAM;AACjB,gBAAMoG,KAAK,GAAGrH,GAAG,CAACrC,GAAJ,CAAQvE,WAAR,EAAd,CADiB,CAEjB;AACA;AACA;AACA;;AACA,gBAAI4G,GAAG,CAAC7C,MAAJ,KAAe,KAAf,IAAwB6C,GAAG,CAAC7C,MAAJ,KAAe,MAAvC,IAAiDkK,KAAK,CAACC,UAAN,CAAiB,SAAjB,CAAjD,IACAD,KAAK,CAACC,UAAN,CAAiB,UAAjB,CADJ,EACkC;AAC9B,qBAAOrG,IAAI,CAACd,MAAL,CAAYH,GAAZ,CAAP;AACH;;AACD,gBAAMa,KAAK,GAAG,KAAKsG,YAAL,CAAkBI,QAAlB,EAAd,CAViB,CAWjB;;AACA,gBAAI1G,KAAK,KAAK,IAAV,IAAkB,CAACb,GAAG,CAACzH,OAAJ,CAAYiB,GAAZ,CAAgB,KAAK4N,UAArB,CAAvB,EAAyD;AACrDpH,iBAAG,GAAGA,GAAG,CAAC7F,KAAJ,CAAU;AAAE5B,uBAAO,EAAEyH,GAAG,CAACzH,OAAJ,CAAYoB,GAAZ,CAAgB,KAAKyN,UAArB,EAAiCvG,KAAjC;AAAX,eAAV,CAAN;AACH;;AACD,mBAAOI,IAAI,CAACd,MAAL,CAAYH,GAAZ,CAAP;AACH;;;;;;AAELkH,yBAAmB,CAACzG,IAApB,GAA2B,SAAS+G,2BAAT,CAAqC7G,CAArC,EAAwC;AAAE,eAAO,KAAKA,CAAC,IAAIuG,mBAAV,EAA+B,uDAAgBZ,sBAAhB,CAA/B,EAAwE,uDAAgBD,gBAAhB,CAAxE,CAAP;AAAoH,OAAzL;;AACAa,yBAAmB,CAACtG,KAApB,GAA4B,iEAA0B;AAAEC,aAAK,EAAEqG,mBAAT;AAA8BpG,eAAO,EAAEoG,mBAAmB,CAACzG;AAA3D,OAA1B,CAA5B;;AACAyG,yBAAmB,CAACnG,cAApB,GAAqC;AAAA,eAAM,CACvC;AAAEtC,cAAI,EAAE6H;AAAR,SADuC,EAEvC;AAAE7H,cAAI,EAAEwI,MAAR;AAAgB9D,oBAAU,EAAE,CAAC;AAAE1E,gBAAI,EAAE,oDAAR;AAAgB2E,gBAAI,EAAE,CAACiD,gBAAD;AAAtB,WAAD;AAA5B,SAFuC,CAAN;AAAA,OAArC;AAIA;;;AAAc,OAAC,YAAY;AAAE,wEAAyBa,mBAAzB,EAA8C,CAAC;AACpEzI,cAAI,EAAE;AAD8D,SAAD,CAA9C,EAErB,YAAY;AAAE,iBAAO,CAAC;AAAEA,gBAAI,EAAE6H;AAAR,WAAD,EAAmC;AAAE7H,gBAAI,EAAEwI,MAAR;AAAgB9D,sBAAU,EAAE,CAAC;AAC7E1E,kBAAI,EAAE,oDADuE;AAE7E2E,kBAAI,EAAE,CAACiD,gBAAD;AAFuE,aAAD;AAA5B,WAAnC,CAAP;AAGF,SALS,EAKP,IALO;AAKC,OALhB;AAOd;;;;;;;;AAOA;;;;;;;;;;;UASMoB,uB;AACF,yCAAYC,OAAZ,EAAqBC,QAArB,EAA+B;AAAA;;AAC3B,eAAKD,OAAL,GAAeA,OAAf;AACA,eAAKC,QAAL,GAAgBA,QAAhB;AACA,eAAKC,KAAL,GAAa,IAAb;AACH;;;;iCACM5H,G,EAAK;AACR,gBAAI,KAAK4H,KAAL,KAAe,IAAnB,EAAyB;AACrB,kBAAMC,YAAY,GAAG,KAAKF,QAAL,CAAclO,GAAd,CAAkB2H,iBAAlB,EAAqC,EAArC,CAArB;AACA,mBAAKwG,KAAL,GAAaC,YAAY,CAACC,WAAb,CAAyB,UAAC7G,IAAD,EAAOC,WAAP;AAAA,uBAAuB,IAAIF,sBAAJ,CAA2BC,IAA3B,EAAiCC,WAAjC,CAAvB;AAAA,eAAzB,EAA+F,KAAKwG,OAApG,CAAb;AACH;;AACD,mBAAO,KAAKE,KAAL,CAAWzH,MAAX,CAAkBH,GAAlB,CAAP;AACH;;;;;;AAELyH,6BAAuB,CAAChH,IAAxB,GAA+B,SAASsH,+BAAT,CAAyCpH,CAAzC,EAA4C;AAAE,eAAO,KAAKA,CAAC,IAAI8G,uBAAV,EAAmC,uDAAgBpP,WAAhB,CAAnC,EAAiE,uDAAgB,sDAAhB,CAAjE,CAAP;AAA4G,OAAzL;;AACAoP,6BAAuB,CAAC7G,KAAxB,GAAgC,iEAA0B;AAAEC,aAAK,EAAE4G,uBAAT;AAAkC3G,eAAO,EAAE2G,uBAAuB,CAAChH;AAAnE,OAA1B,CAAhC;;AACAgH,6BAAuB,CAAC1G,cAAxB,GAAyC;AAAA,eAAM,CAC3C;AAAEtC,cAAI,EAAEpG;AAAR,SAD2C,EAE3C;AAAEoG,cAAI,EAAE;AAAR,SAF2C,CAAN;AAAA,OAAzC;AAIA;;;AAAc,OAAC,YAAY;AAAE,wEAAyBgJ,uBAAzB,EAAkD,CAAC;AACxEhJ,cAAI,EAAE;AADkE,SAAD,CAAlD,EAErB,YAAY;AAAE,iBAAO,CAAC;AAAEA,gBAAI,EAAEpG;AAAR,WAAD,EAAwB;AAAEoG,gBAAI,EAAE;AAAR,WAAxB,CAAP;AAA4D,SAFrD,EAEuD,IAFvD;AAE+D,OAF9E;AAGd;;;;;;;;;;AAQA,eAASuJ,mBAAT,CAA6BN,OAA7B,EAAyD;AAAA,YAAnBG,YAAmB,uEAAJ,EAAI;;AACrD,YAAI,CAACA,YAAL,EAAmB;AACf,iBAAOH,OAAP;AACH;;AACD,eAAOG,YAAY,CAACC,WAAb,CAAyB,UAAC7G,IAAD,EAAOC,WAAP;AAAA,iBAAuB,IAAIF,sBAAJ,CAA2BC,IAA3B,EAAiCC,WAAjC,CAAvB;AAAA,SAAzB,EAA+FwG,OAA/F,CAAP;AACH;AACD;;;;;;;;;;AAQA,eAASO,oBAAT,GAAgC;AAC5B,YAAI,OAAOC,MAAP,KAAkB,QAAtB,EAAgC;AAC5B,iBAAOA,MAAP;AACH;;AACD,eAAO,EAAP;AACH;AACD;;;;;;;;;;;;;;UAYMC,oB;;;;;;;;AACF;;;oCAGiB;AACb,mBAAO;AACHC,sBAAQ,EAAED,oBADP;AAEHE,uBAAS,EAAE,CACP;AAAEC,uBAAO,EAAEpB,mBAAX;AAAgCqB,wBAAQ,EAAElH;AAA1C,eADO;AAFR,aAAP;AAMH;AACD;;;;;;;;;;;wCAQiC;AAAA,gBAAdlF,OAAc,uEAAJ,EAAI;AAC7B,mBAAO;AACHiM,sBAAQ,EAAED,oBADP;AAEHE,uBAAS,EAAE,CACPlM,OAAO,CAACuK,UAAR,GAAqB;AAAE4B,uBAAO,EAAElC,gBAAX;AAA6BoC,wBAAQ,EAAErM,OAAO,CAACuK;AAA/C,eAArB,GAAmF,EAD5E,EAEPvK,OAAO,CAACiL,UAAR,GAAqB;AAAEkB,uBAAO,EAAEjC,gBAAX;AAA6BmC,wBAAQ,EAAErM,OAAO,CAACiL;AAA/C,eAArB,GAAmF,EAF5E;AAFR,aAAP;AAOH;;;;;;AAELe,0BAAoB,CAACM,IAArB,GAA4B,+DAAwB;AAAEhK,YAAI,EAAE0J;AAAR,OAAxB,CAA5B;AACAA,0BAAoB,CAACO,IAArB,GAA4B,+DAAwB;AAAE5H,eAAO,EAAE,SAAS6H,4BAAT,CAAsChI,CAAtC,EAAyC;AAAE,iBAAO,KAAKA,CAAC,IAAIwH,oBAAV,GAAP;AAA2C,SAAjG;AAAmGE,iBAAS,EAAE,CAC1JnB,mBAD0J,EAE1J;AAAEoB,iBAAO,EAAElH,iBAAX;AAA8BwH,qBAAW,EAAE1B,mBAA3C;AAAgE2B,eAAK,EAAE;AAAvE,SAF0J,EAG1J;AAAEP,iBAAO,EAAEhC,sBAAX;AAAmCiC,kBAAQ,EAAEhC;AAA7C,SAH0J,EAI1J;AAAE+B,iBAAO,EAAElC,gBAAX;AAA6BoC,kBAAQ,EAAE;AAAvC,SAJ0J,EAK1J;AAAEF,iBAAO,EAAEjC,gBAAX;AAA6BmC,kBAAQ,EAAE;AAAvC,SAL0J;AAA9G,OAAxB,CAA5B;AAOA;;AAAc,OAAC,YAAY;AAAE,wEAAyBL,oBAAzB,EAA+C,CAAC;AACrE1J,cAAI,EAAE,sDAD+D;AAErE2E,cAAI,EAAE,CAAC;AACCiF,qBAAS,EAAE,CACPnB,mBADO,EAEP;AAAEoB,qBAAO,EAAElH,iBAAX;AAA8BwH,yBAAW,EAAE1B,mBAA3C;AAAgE2B,mBAAK,EAAE;AAAvE,aAFO,EAGP;AAAEP,qBAAO,EAAEhC,sBAAX;AAAmCiC,sBAAQ,EAAEhC;AAA7C,aAHO,EAIP;AAAE+B,qBAAO,EAAElC,gBAAX;AAA6BoC,sBAAQ,EAAE;AAAvC,aAJO,EAKP;AAAEF,qBAAO,EAAEjC,gBAAX;AAA6BmC,sBAAQ,EAAE;AAAvC,aALO;AADZ,WAAD;AAF+D,SAAD,CAA/C,EAWrB,IAXqB,EAWf,IAXe;AAWP,OAXR;AAYd;;;;;;;;;;;UASMM,gB;;;;AAENA,sBAAgB,CAACL,IAAjB,GAAwB,+DAAwB;AAAEhK,YAAI,EAAEqK;AAAR,OAAxB,CAAxB;AACAA,sBAAgB,CAACJ,IAAjB,GAAwB,+DAAwB;AAAE5H,eAAO,EAAE,SAASiI,wBAAT,CAAkCpI,CAAlC,EAAqC;AAAE,iBAAO,KAAKA,CAAC,IAAImI,gBAAV,GAAP;AAAuC,SAAzF;AAA2FT,iBAAS,EAAE,CAC9IxI,UAD8I,EAE9I;AAAEyI,iBAAO,EAAElQ,WAAX;AAAwBmQ,kBAAQ,EAAEd;AAAlC,SAF8I,EAG9ItD,cAH8I,EAI9I;AAAEmE,iBAAO,EAAEjQ,WAAX;AAAwBuQ,qBAAW,EAAEzE;AAArC,SAJ8I,EAK9IH,UAL8I,EAM9I;AAAEsE,iBAAO,EAAEvE,UAAX;AAAuB6E,qBAAW,EAAE5E;AAApC,SAN8I,CAAtG;AAOzCgF,eAAO,EAAE,CAAC,CACLb,oBAAoB,CAACc,WAArB,CAAiC;AAC7BvC,oBAAU,EAAE,YADiB;AAE7BU,oBAAU,EAAE;AAFiB,SAAjC,CADK,CAAD;AAPgC,OAAxB,CAAxB;;AAaA,OAAC,YAAY;AAAE,SAAC,OAAO8B,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmD,iEAA0BJ,gBAA1B,EAA4C;AAAEE,iBAAO,EAAE,CAACb,oBAAD;AAAX,SAA5C,CAAnD;AAAsI,OAArJ;AACA;;;AAAc,OAAC,YAAY;AAAE,wEAAyBW,gBAAzB,EAA2C,CAAC;AACjErK,cAAI,EAAE,sDAD2D;AAEjE2E,cAAI,EAAE,CAAC;AACC;;;AAGA4F,mBAAO,EAAE,CACLb,oBAAoB,CAACc,WAArB,CAAiC;AAC7BvC,wBAAU,EAAE,YADiB;AAE7BU,wBAAU,EAAE;AAFiB,aAAjC,CADK,CAJV;;AAUC;;;;AAIAiB,qBAAS,EAAE,CACPxI,UADO,EAEP;AAAEyI,qBAAO,EAAElQ,WAAX;AAAwBmQ,sBAAQ,EAAEd;AAAlC,aAFO,EAGPtD,cAHO,EAIP;AAAEmE,qBAAO,EAAEjQ,WAAX;AAAwBuQ,yBAAW,EAAEzE;AAArC,aAJO,EAKPH,UALO,EAMP;AAAEsE,qBAAO,EAAEvE,UAAX;AAAuB6E,yBAAW,EAAE5E;AAApC,aANO;AAdZ,WAAD;AAF2D,SAAD,CAA3C,EAyBrB,IAzBqB,EAyBf,IAzBe;AAyBP,OAzBR;AA0Bd;;;;;;;;;;;;;UAWMmF,qB;;;;AAENA,2BAAqB,CAACV,IAAtB,GAA6B,+DAAwB;AAAEhK,YAAI,EAAE0K;AAAR,OAAxB,CAA7B;AACAA,2BAAqB,CAACT,IAAtB,GAA6B,+DAAwB;AAAE5H,eAAO,EAAE,SAASsI,6BAAT,CAAuCzI,CAAvC,EAA0C;AAAE,iBAAO,KAAKA,CAAC,IAAIwI,qBAAV,GAAP;AAA4C,SAAnG;AAAqGd,iBAAS,EAAE,CAC7JzG,kBAD6J,EAE7J;AAAE0G,iBAAO,EAAE3G,oBAAX;AAAiC0H,oBAAU,EAAEpB;AAA7C,SAF6J,EAG7J;AAAEK,iBAAO,EAAElH,iBAAX;AAA8BmH,kBAAQ,EAAElF,gBAAxC;AAA0DwF,eAAK,EAAE;AAAjE,SAH6J;AAAhH,OAAxB,CAA7B;AAKA;;AAAc,OAAC,YAAY;AAAE,wEAAyBM,qBAAzB,EAAgD,CAAC;AACtE1K,cAAI,EAAE,sDADgE;AAEtE2E,cAAI,EAAE,CAAC;AACCiF,qBAAS,EAAE,CACPzG,kBADO,EAEP;AAAE0G,qBAAO,EAAE3G,oBAAX;AAAiC0H,wBAAU,EAAEpB;AAA7C,aAFO,EAGP;AAAEK,qBAAO,EAAElH,iBAAX;AAA8BmH,sBAAQ,EAAElF,gBAAxC;AAA0DwF,mBAAK,EAAE;AAAjE,aAHO;AADZ,WAAD;AAFgE,SAAD,CAAhD,EASrB,IATqB,EASf,IATe;AASP,OATR;AAWd;;;;;;;;AAQA;;;;;;;;AAQA;;;AAMA;;;;;;;;;;;;;;;;;;AC7lEA;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCMFS,cAAc;AAMzB,gCAAmBC,IAAnB,EAAoC;AAAA;;AAAjB,eAAAA,IAAA,GAAAA,IAAA;AAJX,eAAAC,KAAA,GAAe,kCAAf;AACA,eAAAC,aAAA,GAAuB,wBAAvB;AAG+B;;AANd;AAAA;AAAA,6CAQCC,OARD,EAQ4C;AAAA,gBAA3BC,IAA2B,uEAApB,CAAoB;AAAA,gBAAjBC,cAAiB,uEAAF,EAAE;AACnE,gBAAIC,MAAM,aAAM,KAAKJ,aAAX,2BAAyCC,OAAzC,uBAA6DE,cAA7D,+BAAgGD,IAAhG,qBAA+G,KAAKH,KAApH,CAAV;AACAM,mBAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,mBAAO,KAAKN,IAAL,CAAU9P,GAAV,CAAcoQ,MAAd,CAAP;AACD;AAZwB;;AAAA;AAAA,S;;;;gBALlB;;;;AAKIP,oBAAc,6DAH1B,iEAAW;AACVU,kBAAU,EAAE;AADF,OAAX,CAG0B,GAAdV,cAAc,CAAd;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDb,UAAMW,MAAM,GAAW,CACrB;AACEC,YAAI,EAAE,EADR;AAEEC,iBAAS,EAAE;AAFb,OADqB,CAAvB;;UAWaC,qBAAqB;AAAA;AAAA,O;;AAArBA,2BAAqB,6DAJjC,+DAAS;AACRpB,eAAO,EAAE,CAAC,6DAAaqB,QAAb,CAAsBJ,MAAtB,CAAD,CADD;AAERK,eAAO,EAAE,CAAC,4DAAD;AAFD,OAAT,CAIiC,GAArBF,qBAAqB,CAArB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCKAG,cAAc;AAAA;AAAA,O;;AAAdA,oBAAc,6DAV1B,+DAAS;AACRvB,eAAO,EAAE,CACP,qEADO,EAEP,4DAFO,EAGP,0DAHO,EAIP,0DAJO,EAKP,0EALO,CADD;AAQRwB,oBAAY,EAAE,CAAC,mDAAD;AARN,OAAT,CAU0B,GAAdD,cAAc,CAAd;;;;;;;;;;;;;;;;ACrBb;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCWFE,QAAQ;AAUnB,0BACSC,OADT,EAEUC,cAFV,EAGSC,iBAHT,EAG8C;AAAA;;AAFrC,eAAAF,OAAA,GAAAA,OAAA;AACC,eAAAC,cAAA,GAAAA,cAAA;AACD,eAAAC,iBAAA,GAAAA,iBAAA;AAXF,eAAAC,UAAA,GAAa,IAAI5Q,KAAJ,EAAb;AAGA,eAAA0P,IAAA,GAAO,CAAP;AAEA,eAAAC,cAAA,GAAiB,EAAjB;AAM0C;;AAb9B;AAAA;AAAA,qCAeR;AACT,iBAAKkB,OAAL,GAAe,KAAKH,cAAL,CAAoBI,QAApB,CAA6BC,QAA7B,CAAsCvR,GAAtC,CAA0C,IAA1C,CAAf;AACA,iBAAKwR,KAAL,GAAa,KAAKN,cAAL,CAAoBI,QAApB,CAA6BC,QAA7B,CAAsCvR,GAAtC,CAA0C,OAA1C,CAAb;AACA,iBAAKyR,IAAL,GAAY,KAAKP,cAAL,CAAoBI,QAApB,CAA6BC,QAA7B,CAAsCvR,GAAtC,CAA0C,MAA1C,CAAZ;AACAqQ,mBAAO,CAACC,GAAR,CAAY,KAAKkB,KAAjB;AACD;AApBkB;AAAA;AAAA,wCAsBL5K,KAtBK,EAsBA;AACjB,iBAAKsJ,IAAL,GAAY,CAAZ;AACA,iBAAKwB,aAAL;AAEAC,sBAAU,CAAC,YAAM;AACf/K,mBAAK,CAACgL,MAAN,CAAazI,QAAb;AACD,aAFS,EAEP,GAFO,CAAV;AAGD;AA7BkB;AAAA;AAAA,0CA+BN;AAAA;;AACX,iBAAK8H,OAAL,CAAaY,kBAAb,CAAgC,KAAKR,OAArC,EAA8C,KAAKnB,IAAnD,EAAyD4B,SAAzD,CACE,UAAAhJ,IAAI,EAAE;AACJ,kBAAMuC,QAAQ,GAAIvC,IAAlB;AACA;;;AAEA,kBAAG,OAAI,CAACoH,IAAL,IAAa,CAAhB,EAAkB;AAChB,uBAAI,CAACkB,UAAL,GAAkB/F,QAAQ,CAAC0G,QAA3B;AACD,eAFD,MAEK;AACH,uBAAI,CAACX,UAAL,GAAkB,OAAI,CAACA,UAAL,CAAgBnQ,MAAhB,CAAuBoK,QAAQ,CAAC0G,QAAhC,CAAlB;AACD;;AACD,qBAAI,CAACC,OAAL,GAAeC,IAAI,CAACC,KAAL,CAAW7G,QAAQ,CAAC8G,YAAT,GAAsB,OAAI,CAAChC,cAAtC,CAAf;;AACA,kBAAG9E,QAAQ,CAAC8G,YAAT,GAAsB,OAAI,CAAChC,cAA3B,IAA2C,CAA9C,EAAgD;AAC9C,uBAAI,CAAC6B,OAAL;AACD;;AACD3B,qBAAO,CAACC,GAAR,CAAY,OAAI,CAAC0B,OAAjB;AACD,aAfH,EAiBE,UAAA/L,KAAK,EAAE;AACLoK,qBAAO,CAACC,GAAR,CAAYrK,KAAZ;AACD,aAnBH;AAqBD;AArDkB;AAAA;AAAA,4CAuDJ;AACb,iBAAKyL,aAAL;AACA,iBAAKU,aAAL;AACD;AA1DkB;AAAA;AAAA,0CA4DA;;;;;;;;;AACD,6BAAM,KAAKjB,iBAAL,CAAuBkB,MAAvB,CAA8B;AAClDrM,+BAAO,EAAE,wBADyC;AAElDsM,gCAAQ,EAAE;AAFwC,uBAA9B,CAAN;;;AAAVC,6B;;AAKN,6BAAMA,OAAO,CAACC,OAAR,EAAN;;;;AAEuB,6BAAMD,OAAO,CAACE,YAAR,EAAN;;;;AAAfC,0B,yBAAAA,I;AAAM5J,0B,yBAAAA,I;;;;;;;;;AACf;AArEkB;AAAA;AAAA,+CAuEElC,KAvEF,EAuES;AAAA;;AAC1B,gBAAG,KAAKsJ,IAAL,IAAW,KAAK8B,OAAnB,EAA2B;AACzBpL,mBAAK,CAACgL,MAAN,CAAae,QAAb,GAAwB,IAAxB;AACD;;AACD,gBAAG,KAAKzC,IAAL,IAAW,KAAK8B,OAAnB,EAA2B;AACzBL,wBAAU,CAAC,YAAM;AACf,uBAAI,CAACzB,IAAL;;AACA,uBAAI,CAACwB,aAAL;;AACArB,uBAAO,CAACC,GAAR,CAAY,MAAZ;AACA1J,qBAAK,CAACgL,MAAN,CAAazI,QAAb;AACD,eALS,EAKP,IALO,CAAV;AAMD;AACF;AAnFkB;;AAAA;AAAA,S;;;;gBARZ;;gBAFA;;gBACA;;;;AASI6H,cAAQ,6DANpB,gEAAU;AACT4B,gBAAQ,EAAE,UADD;AAETC,gBAAQ,EAAR;AAAA;AAAA,gGAFS;AAITjE,iBAAS,EAAE,CAAC,4EAAD,CAJF;;;;AAAA,OAAV,CAMoB,GAARoC,QAAQ,CAAR","file":"pages-main-main-module-es5.js","sourcesContent":["/**\r\n * @license Angular v10.0.14\r\n * (c) 2010-2020 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\r\n\r\nimport { Injectable, InjectionToken, Inject, PLATFORM_ID, Injector, NgModule } from '@angular/core';\r\nimport { of, Observable } from 'rxjs';\r\nimport { concatMap, filter, map } from 'rxjs/operators';\r\nimport { DOCUMENT, ɵparseCookieValue } from '@angular/common';\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\r\n * `HttpResponse`.\r\n *\r\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\r\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\r\n * `HttpBackend`.\r\n *\r\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\r\n *\r\n * @publicApi\r\n */\r\nimport * as ɵngcc0 from '@angular/core';\r\nclass HttpHandler {\r\n}\r\n/**\r\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\r\n *\r\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\r\n *\r\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\r\n * through the interceptor chain.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpBackend {\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Represents the header configuration options for an HTTP request.\r\n * Instances are immutable. Modifying methods return a cloned\r\n * instance with the change. The original object is never changed.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpHeaders {\r\n    /**  Constructs a new HTTP header object with the given values.*/\r\n    constructor(headers) {\r\n        /**\r\n         * Internal map of lowercased header names to the normalized\r\n         * form of the name (the form seen first).\r\n         */\r\n        this.normalizedNames = new Map();\r\n        /**\r\n         * Queued updates to be materialized the next initialization.\r\n         */\r\n        this.lazyUpdate = null;\r\n        if (!headers) {\r\n            this.headers = new Map();\r\n        }\r\n        else if (typeof headers === 'string') {\r\n            this.lazyInit = () => {\r\n                this.headers = new Map();\r\n                headers.split('\\n').forEach(line => {\r\n                    const index = line.indexOf(':');\r\n                    if (index > 0) {\r\n                        const name = line.slice(0, index);\r\n                        const key = name.toLowerCase();\r\n                        const value = line.slice(index + 1).trim();\r\n                        this.maybeSetNormalizedName(name, key);\r\n                        if (this.headers.has(key)) {\r\n                            this.headers.get(key).push(value);\r\n                        }\r\n                        else {\r\n                            this.headers.set(key, [value]);\r\n                        }\r\n                    }\r\n                });\r\n            };\r\n        }\r\n        else {\r\n            this.lazyInit = () => {\r\n                this.headers = new Map();\r\n                Object.keys(headers).forEach(name => {\r\n                    let values = headers[name];\r\n                    const key = name.toLowerCase();\r\n                    if (typeof values === 'string') {\r\n                        values = [values];\r\n                    }\r\n                    if (values.length > 0) {\r\n                        this.headers.set(key, values);\r\n                        this.maybeSetNormalizedName(name, key);\r\n                    }\r\n                });\r\n            };\r\n        }\r\n    }\r\n    /**\r\n     * Checks for existence of a given header.\r\n     *\r\n     * @param name The header name to check for existence.\r\n     *\r\n     * @returns True if the header exists, false otherwise.\r\n     */\r\n    has(name) {\r\n        this.init();\r\n        return this.headers.has(name.toLowerCase());\r\n    }\r\n    /**\r\n     * Retrieves the first value of a given header.\r\n     *\r\n     * @param name The header name.\r\n     *\r\n     * @returns The value string if the header exists, null otherwise\r\n     */\r\n    get(name) {\r\n        this.init();\r\n        const values = this.headers.get(name.toLowerCase());\r\n        return values && values.length > 0 ? values[0] : null;\r\n    }\r\n    /**\r\n     * Retrieves the names of the headers.\r\n     *\r\n     * @returns A list of header names.\r\n     */\r\n    keys() {\r\n        this.init();\r\n        return Array.from(this.normalizedNames.values());\r\n    }\r\n    /**\r\n     * Retrieves a list of values for a given header.\r\n     *\r\n     * @param name The header name from which to retrieve values.\r\n     *\r\n     * @returns A string of values if the header exists, null otherwise.\r\n     */\r\n    getAll(name) {\r\n        this.init();\r\n        return this.headers.get(name.toLowerCase()) || null;\r\n    }\r\n    /**\r\n     * Appends a new value to the existing set of values for a header\r\n     * and returns them in a clone of the original instance.\r\n     *\r\n     * @param name The header name for which to append the values.\r\n     * @param value The value to append.\r\n     *\r\n     * @returns A clone of the HTTP headers object with the value appended to the given header.\r\n     */\r\n    append(name, value) {\r\n        return this.clone({ name, value, op: 'a' });\r\n    }\r\n    /**\r\n     * Sets or modifies a value for a given header in a clone of the original instance.\r\n     * If the header already exists, its value is replaced with the given value\r\n     * in the returned object.\r\n     *\r\n     * @param name The header name.\r\n     * @param value The value or values to set or overide for the given header.\r\n     *\r\n     * @returns A clone of the HTTP headers object with the newly set header value.\r\n     */\r\n    set(name, value) {\r\n        return this.clone({ name, value, op: 's' });\r\n    }\r\n    /**\r\n     * Deletes values for a given header in a clone of the original instance.\r\n     *\r\n     * @param name The header name.\r\n     * @param value The value or values to delete for the given header.\r\n     *\r\n     * @returns A clone of the HTTP headers object with the given value deleted.\r\n     */\r\n    delete(name, value) {\r\n        return this.clone({ name, value, op: 'd' });\r\n    }\r\n    maybeSetNormalizedName(name, lcName) {\r\n        if (!this.normalizedNames.has(lcName)) {\r\n            this.normalizedNames.set(lcName, name);\r\n        }\r\n    }\r\n    init() {\r\n        if (!!this.lazyInit) {\r\n            if (this.lazyInit instanceof HttpHeaders) {\r\n                this.copyFrom(this.lazyInit);\r\n            }\r\n            else {\r\n                this.lazyInit();\r\n            }\r\n            this.lazyInit = null;\r\n            if (!!this.lazyUpdate) {\r\n                this.lazyUpdate.forEach(update => this.applyUpdate(update));\r\n                this.lazyUpdate = null;\r\n            }\r\n        }\r\n    }\r\n    copyFrom(other) {\r\n        other.init();\r\n        Array.from(other.headers.keys()).forEach(key => {\r\n            this.headers.set(key, other.headers.get(key));\r\n            this.normalizedNames.set(key, other.normalizedNames.get(key));\r\n        });\r\n    }\r\n    clone(update) {\r\n        const clone = new HttpHeaders();\r\n        clone.lazyInit =\r\n            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\r\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\r\n        return clone;\r\n    }\r\n    applyUpdate(update) {\r\n        const key = update.name.toLowerCase();\r\n        switch (update.op) {\r\n            case 'a':\r\n            case 's':\r\n                let value = update.value;\r\n                if (typeof value === 'string') {\r\n                    value = [value];\r\n                }\r\n                if (value.length === 0) {\r\n                    return;\r\n                }\r\n                this.maybeSetNormalizedName(update.name, key);\r\n                const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\r\n                base.push(...value);\r\n                this.headers.set(key, base);\r\n                break;\r\n            case 'd':\r\n                const toDelete = update.value;\r\n                if (!toDelete) {\r\n                    this.headers.delete(key);\r\n                    this.normalizedNames.delete(key);\r\n                }\r\n                else {\r\n                    let existing = this.headers.get(key);\r\n                    if (!existing) {\r\n                        return;\r\n                    }\r\n                    existing = existing.filter(value => toDelete.indexOf(value) === -1);\r\n                    if (existing.length === 0) {\r\n                        this.headers.delete(key);\r\n                        this.normalizedNames.delete(key);\r\n                    }\r\n                    else {\r\n                        this.headers.set(key, existing);\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    forEach(fn) {\r\n        this.init();\r\n        Array.from(this.normalizedNames.keys())\r\n            .forEach(key => fn(this.normalizedNames.get(key), this.headers.get(key)));\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Provides encoding and decoding of URL parameter and query-string values.\r\n *\r\n * Serializes and parses URL parameter keys and values to encode and decode them.\r\n * If you pass URL query parameters without encoding,\r\n * the query parameters can be misinterpreted at the receiving end.\r\n *\r\n *\r\n * @publicApi\r\n */\r\nclass HttpUrlEncodingCodec {\r\n    /**\r\n     * Encodes a key name for a URL parameter or query-string.\r\n     * @param key The key name.\r\n     * @returns The encoded key name.\r\n     */\r\n    encodeKey(key) {\r\n        return standardEncoding(key);\r\n    }\r\n    /**\r\n     * Encodes the value of a URL parameter or query-string.\r\n     * @param value The value.\r\n     * @returns The encoded value.\r\n     */\r\n    encodeValue(value) {\r\n        return standardEncoding(value);\r\n    }\r\n    /**\r\n     * Decodes an encoded URL parameter or query-string key.\r\n     * @param key The encoded key name.\r\n     * @returns The decoded key name.\r\n     */\r\n    decodeKey(key) {\r\n        return decodeURIComponent(key);\r\n    }\r\n    /**\r\n     * Decodes an encoded URL parameter or query-string value.\r\n     * @param value The encoded value.\r\n     * @returns The decoded value.\r\n     */\r\n    decodeValue(value) {\r\n        return decodeURIComponent(value);\r\n    }\r\n}\r\nfunction paramParser(rawParams, codec) {\r\n    const map = new Map();\r\n    if (rawParams.length > 0) {\r\n        const params = rawParams.split('&');\r\n        params.forEach((param) => {\r\n            const eqIdx = param.indexOf('=');\r\n            const [key, val] = eqIdx == -1 ?\r\n                [codec.decodeKey(param), ''] :\r\n                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\r\n            const list = map.get(key) || [];\r\n            list.push(val);\r\n            map.set(key, list);\r\n        });\r\n    }\r\n    return map;\r\n}\r\nfunction standardEncoding(v) {\r\n    return encodeURIComponent(v)\r\n        .replace(/%40/gi, '@')\r\n        .replace(/%3A/gi, ':')\r\n        .replace(/%24/gi, '$')\r\n        .replace(/%2C/gi, ',')\r\n        .replace(/%3B/gi, ';')\r\n        .replace(/%2B/gi, '+')\r\n        .replace(/%3D/gi, '=')\r\n        .replace(/%3F/gi, '?')\r\n        .replace(/%2F/gi, '/');\r\n}\r\n/**\r\n * An HTTP request/response body that represents serialized parameters,\r\n * per the MIME type `application/x-www-form-urlencoded`.\r\n *\r\n * This class is immutable; all mutation operations return a new instance.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpParams {\r\n    constructor(options = {}) {\r\n        this.updates = null;\r\n        this.cloneFrom = null;\r\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\r\n        if (!!options.fromString) {\r\n            if (!!options.fromObject) {\r\n                throw new Error(`Cannot specify both fromString and fromObject.`);\r\n            }\r\n            this.map = paramParser(options.fromString, this.encoder);\r\n        }\r\n        else if (!!options.fromObject) {\r\n            this.map = new Map();\r\n            Object.keys(options.fromObject).forEach(key => {\r\n                const value = options.fromObject[key];\r\n                this.map.set(key, Array.isArray(value) ? value : [value]);\r\n            });\r\n        }\r\n        else {\r\n            this.map = null;\r\n        }\r\n    }\r\n    /**\r\n     * Reports whether the body includes one or more values for a given parameter.\r\n     * @param param The parameter name.\r\n     * @returns True if the parameter has one or more values,\r\n     * false if it has no value or is not present.\r\n     */\r\n    has(param) {\r\n        this.init();\r\n        return this.map.has(param);\r\n    }\r\n    /**\r\n     * Retrieves the first value for a parameter.\r\n     * @param param The parameter name.\r\n     * @returns The first value of the given parameter,\r\n     * or `null` if the parameter is not present.\r\n     */\r\n    get(param) {\r\n        this.init();\r\n        const res = this.map.get(param);\r\n        return !!res ? res[0] : null;\r\n    }\r\n    /**\r\n     * Retrieves all values for a  parameter.\r\n     * @param param The parameter name.\r\n     * @returns All values in a string array,\r\n     * or `null` if the parameter not present.\r\n     */\r\n    getAll(param) {\r\n        this.init();\r\n        return this.map.get(param) || null;\r\n    }\r\n    /**\r\n     * Retrieves all the parameters for this body.\r\n     * @returns The parameter names in a string array.\r\n     */\r\n    keys() {\r\n        this.init();\r\n        return Array.from(this.map.keys());\r\n    }\r\n    /**\r\n     * Appends a new value to existing values for a parameter.\r\n     * @param param The parameter name.\r\n     * @param value The new value to add.\r\n     * @return A new body with the appended value.\r\n     */\r\n    append(param, value) {\r\n        return this.clone({ param, value, op: 'a' });\r\n    }\r\n    /**\r\n     * Replaces the value for a parameter.\r\n     * @param param The parameter name.\r\n     * @param value The new value.\r\n     * @return A new body with the new value.\r\n     */\r\n    set(param, value) {\r\n        return this.clone({ param, value, op: 's' });\r\n    }\r\n    /**\r\n     * Removes a given value or all values from a parameter.\r\n     * @param param The parameter name.\r\n     * @param value The value to remove, if provided.\r\n     * @return A new body with the given value removed, or with all values\r\n     * removed if no value is specified.\r\n     */\r\n    delete(param, value) {\r\n        return this.clone({ param, value, op: 'd' });\r\n    }\r\n    /**\r\n     * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\r\n     * separated by `&`s.\r\n     */\r\n    toString() {\r\n        this.init();\r\n        return this.keys()\r\n            .map(key => {\r\n            const eKey = this.encoder.encodeKey(key);\r\n            // `a: ['1']` produces `'a=1'`\r\n            // `b: []` produces `''`\r\n            // `c: ['1', '2']` produces `'c=1&c=2'`\r\n            return this.map.get(key).map(value => eKey + '=' + this.encoder.encodeValue(value))\r\n                .join('&');\r\n        })\r\n            // filter out empty values because `b: []` produces `''`\r\n            // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\r\n            .filter(param => param !== '')\r\n            .join('&');\r\n    }\r\n    clone(update) {\r\n        const clone = new HttpParams({ encoder: this.encoder });\r\n        clone.cloneFrom = this.cloneFrom || this;\r\n        clone.updates = (this.updates || []).concat([update]);\r\n        return clone;\r\n    }\r\n    init() {\r\n        if (this.map === null) {\r\n            this.map = new Map();\r\n        }\r\n        if (this.cloneFrom !== null) {\r\n            this.cloneFrom.init();\r\n            this.cloneFrom.keys().forEach(key => this.map.set(key, this.cloneFrom.map.get(key)));\r\n            this.updates.forEach(update => {\r\n                switch (update.op) {\r\n                    case 'a':\r\n                    case 's':\r\n                        const base = (update.op === 'a' ? this.map.get(update.param) : undefined) || [];\r\n                        base.push(update.value);\r\n                        this.map.set(update.param, base);\r\n                        break;\r\n                    case 'd':\r\n                        if (update.value !== undefined) {\r\n                            let base = this.map.get(update.param) || [];\r\n                            const idx = base.indexOf(update.value);\r\n                            if (idx !== -1) {\r\n                                base.splice(idx, 1);\r\n                            }\r\n                            if (base.length > 0) {\r\n                                this.map.set(update.param, base);\r\n                            }\r\n                            else {\r\n                                this.map.delete(update.param);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.map.delete(update.param);\r\n                            break;\r\n                        }\r\n                }\r\n            });\r\n            this.cloneFrom = this.updates = null;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Determine whether the given HTTP method may include a body.\r\n */\r\nfunction mightHaveBody(method) {\r\n    switch (method) {\r\n        case 'DELETE':\r\n        case 'GET':\r\n        case 'HEAD':\r\n        case 'OPTIONS':\r\n        case 'JSONP':\r\n            return false;\r\n        default:\r\n            return true;\r\n    }\r\n}\r\n/**\r\n * Safely assert whether the given value is an ArrayBuffer.\r\n *\r\n * In some execution environments ArrayBuffer is not defined.\r\n */\r\nfunction isArrayBuffer(value) {\r\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\r\n}\r\n/**\r\n * Safely assert whether the given value is a Blob.\r\n *\r\n * In some execution environments Blob is not defined.\r\n */\r\nfunction isBlob(value) {\r\n    return typeof Blob !== 'undefined' && value instanceof Blob;\r\n}\r\n/**\r\n * Safely assert whether the given value is a FormData instance.\r\n *\r\n * In some execution environments FormData is not defined.\r\n */\r\nfunction isFormData(value) {\r\n    return typeof FormData !== 'undefined' && value instanceof FormData;\r\n}\r\n/**\r\n * An outgoing HTTP request with an optional typed body.\r\n *\r\n * `HttpRequest` represents an outgoing request, including URL, method,\r\n * headers, body, and other request configuration options. Instances should be\r\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\r\n * method should be used.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpRequest {\r\n    constructor(method, url, third, fourth) {\r\n        this.url = url;\r\n        /**\r\n         * The request body, or `null` if one isn't set.\r\n         *\r\n         * Bodies are not enforced to be immutable, as they can include a reference to any\r\n         * user-defined data type. However, interceptors should take care to preserve\r\n         * idempotence by treating them as such.\r\n         */\r\n        this.body = null;\r\n        /**\r\n         * Whether this request should be made in a way that exposes progress events.\r\n         *\r\n         * Progress events are expensive (change detection runs on each event) and so\r\n         * they should only be requested if the consumer intends to monitor them.\r\n         */\r\n        this.reportProgress = false;\r\n        /**\r\n         * Whether this request should be sent with outgoing credentials (cookies).\r\n         */\r\n        this.withCredentials = false;\r\n        /**\r\n         * The expected response type of the server.\r\n         *\r\n         * This is used to parse the response appropriately before returning it to\r\n         * the requestee.\r\n         */\r\n        this.responseType = 'json';\r\n        this.method = method.toUpperCase();\r\n        // Next, need to figure out which argument holds the HttpRequestInit\r\n        // options, if any.\r\n        let options;\r\n        // Check whether a body argument is expected. The only valid way to omit\r\n        // the body argument is to use a known no-body method like GET.\r\n        if (mightHaveBody(this.method) || !!fourth) {\r\n            // Body is the third argument, options are the fourth.\r\n            this.body = (third !== undefined) ? third : null;\r\n            options = fourth;\r\n        }\r\n        else {\r\n            // No body required, options are the third argument. The body stays null.\r\n            options = third;\r\n        }\r\n        // If options have been passed, interpret them.\r\n        if (options) {\r\n            // Normalize reportProgress and withCredentials.\r\n            this.reportProgress = !!options.reportProgress;\r\n            this.withCredentials = !!options.withCredentials;\r\n            // Override default response type of 'json' if one is provided.\r\n            if (!!options.responseType) {\r\n                this.responseType = options.responseType;\r\n            }\r\n            // Override headers if they're provided.\r\n            if (!!options.headers) {\r\n                this.headers = options.headers;\r\n            }\r\n            if (!!options.params) {\r\n                this.params = options.params;\r\n            }\r\n        }\r\n        // If no headers have been passed in, construct a new HttpHeaders instance.\r\n        if (!this.headers) {\r\n            this.headers = new HttpHeaders();\r\n        }\r\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\r\n        if (!this.params) {\r\n            this.params = new HttpParams();\r\n            this.urlWithParams = url;\r\n        }\r\n        else {\r\n            // Encode the parameters to a string in preparation for inclusion in the URL.\r\n            const params = this.params.toString();\r\n            if (params.length === 0) {\r\n                // No parameters, the visible URL is just the URL given at creation time.\r\n                this.urlWithParams = url;\r\n            }\r\n            else {\r\n                // Does the URL already have query parameters? Look for '?'.\r\n                const qIdx = url.indexOf('?');\r\n                // There are 3 cases to handle:\r\n                // 1) No existing parameters -> append '?' followed by params.\r\n                // 2) '?' exists and is followed by existing query string ->\r\n                //    append '&' followed by params.\r\n                // 3) '?' exists at the end of the url -> append params directly.\r\n                // This basically amounts to determining the character, if any, with\r\n                // which to join the URL and parameters.\r\n                const sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\r\n                this.urlWithParams = url + sep + params;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Transform the free-form body into a serialized format suitable for\r\n     * transmission to the server.\r\n     */\r\n    serializeBody() {\r\n        // If no body is present, no need to serialize it.\r\n        if (this.body === null) {\r\n            return null;\r\n        }\r\n        // Check whether the body is already in a serialized form. If so,\r\n        // it can just be returned directly.\r\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\r\n            typeof this.body === 'string') {\r\n            return this.body;\r\n        }\r\n        // Check whether the body is an instance of HttpUrlEncodedParams.\r\n        if (this.body instanceof HttpParams) {\r\n            return this.body.toString();\r\n        }\r\n        // Check whether the body is an object or array, and serialize with JSON if so.\r\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\r\n            Array.isArray(this.body)) {\r\n            return JSON.stringify(this.body);\r\n        }\r\n        // Fall back on toString() for everything else.\r\n        return this.body.toString();\r\n    }\r\n    /**\r\n     * Examine the body and attempt to infer an appropriate MIME type\r\n     * for it.\r\n     *\r\n     * If no such type can be inferred, this method will return `null`.\r\n     */\r\n    detectContentTypeHeader() {\r\n        // An empty body has no content type.\r\n        if (this.body === null) {\r\n            return null;\r\n        }\r\n        // FormData bodies rely on the browser's content type assignment.\r\n        if (isFormData(this.body)) {\r\n            return null;\r\n        }\r\n        // Blobs usually have their own content type. If it doesn't, then\r\n        // no type can be inferred.\r\n        if (isBlob(this.body)) {\r\n            return this.body.type || null;\r\n        }\r\n        // Array buffers have unknown contents and thus no type can be inferred.\r\n        if (isArrayBuffer(this.body)) {\r\n            return null;\r\n        }\r\n        // Technically, strings could be a form of JSON data, but it's safe enough\r\n        // to assume they're plain strings.\r\n        if (typeof this.body === 'string') {\r\n            return 'text/plain';\r\n        }\r\n        // `HttpUrlEncodedParams` has its own content-type.\r\n        if (this.body instanceof HttpParams) {\r\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\r\n        }\r\n        // Arrays, objects, and numbers will be encoded as JSON.\r\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\r\n            Array.isArray(this.body)) {\r\n            return 'application/json';\r\n        }\r\n        // No type could be inferred.\r\n        return null;\r\n    }\r\n    clone(update = {}) {\r\n        // For method, url, and responseType, take the current value unless\r\n        // it is overridden in the update hash.\r\n        const method = update.method || this.method;\r\n        const url = update.url || this.url;\r\n        const responseType = update.responseType || this.responseType;\r\n        // The body is somewhat special - a `null` value in update.body means\r\n        // whatever current body is present is being overridden with an empty\r\n        // body, whereas an `undefined` value in update.body implies no\r\n        // override.\r\n        const body = (update.body !== undefined) ? update.body : this.body;\r\n        // Carefully handle the boolean options to differentiate between\r\n        // `false` and `undefined` in the update args.\r\n        const withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\r\n        const reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\r\n        // Headers and params may be appended to if `setHeaders` or\r\n        // `setParams` are used.\r\n        let headers = update.headers || this.headers;\r\n        let params = update.params || this.params;\r\n        // Check whether the caller has asked to add headers.\r\n        if (update.setHeaders !== undefined) {\r\n            // Set every requested header.\r\n            headers =\r\n                Object.keys(update.setHeaders)\r\n                    .reduce((headers, name) => headers.set(name, update.setHeaders[name]), headers);\r\n        }\r\n        // Check whether the caller has asked to set params.\r\n        if (update.setParams) {\r\n            // Set every requested param.\r\n            params = Object.keys(update.setParams)\r\n                .reduce((params, param) => params.set(param, update.setParams[param]), params);\r\n        }\r\n        // Finally, construct the new HttpRequest using the pieces from above.\r\n        return new HttpRequest(method, url, body, {\r\n            params,\r\n            headers,\r\n            reportProgress,\r\n            responseType,\r\n            withCredentials,\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Type enumeration for the different kinds of `HttpEvent`.\r\n *\r\n * @publicApi\r\n */\r\nvar HttpEventType;\r\n(function (HttpEventType) {\r\n    /**\r\n     * The request was sent out over the wire.\r\n     */\r\n    HttpEventType[HttpEventType[\"Sent\"] = 0] = \"Sent\";\r\n    /**\r\n     * An upload progress event was received.\r\n     */\r\n    HttpEventType[HttpEventType[\"UploadProgress\"] = 1] = \"UploadProgress\";\r\n    /**\r\n     * The response status code and headers were received.\r\n     */\r\n    HttpEventType[HttpEventType[\"ResponseHeader\"] = 2] = \"ResponseHeader\";\r\n    /**\r\n     * A download progress event was received.\r\n     */\r\n    HttpEventType[HttpEventType[\"DownloadProgress\"] = 3] = \"DownloadProgress\";\r\n    /**\r\n     * The full response including the body was received.\r\n     */\r\n    HttpEventType[HttpEventType[\"Response\"] = 4] = \"Response\";\r\n    /**\r\n     * A custom event from an interceptor or a backend.\r\n     */\r\n    HttpEventType[HttpEventType[\"User\"] = 5] = \"User\";\r\n})(HttpEventType || (HttpEventType = {}));\r\n/**\r\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpResponseBase {\r\n    /**\r\n     * Super-constructor for all responses.\r\n     *\r\n     * The single parameter accepted is an initialization hash. Any properties\r\n     * of the response passed there will override the default values.\r\n     */\r\n    constructor(init, defaultStatus = 200, defaultStatusText = 'OK') {\r\n        // If the hash has values passed, use them to initialize the response.\r\n        // Otherwise use the default values.\r\n        this.headers = init.headers || new HttpHeaders();\r\n        this.status = init.status !== undefined ? init.status : defaultStatus;\r\n        this.statusText = init.statusText || defaultStatusText;\r\n        this.url = init.url || null;\r\n        // Cache the ok value to avoid defining a getter.\r\n        this.ok = this.status >= 200 && this.status < 300;\r\n    }\r\n}\r\n/**\r\n * A partial HTTP response which only includes the status and header data,\r\n * but no response body.\r\n *\r\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\r\n * event stream, only when progress events are requested.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpHeaderResponse extends HttpResponseBase {\r\n    /**\r\n     * Create a new `HttpHeaderResponse` with the given parameters.\r\n     */\r\n    constructor(init = {}) {\r\n        super(init);\r\n        this.type = HttpEventType.ResponseHeader;\r\n    }\r\n    /**\r\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\r\n     * given parameter hash.\r\n     */\r\n    clone(update = {}) {\r\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\r\n        // overriding the current parameters with new ones if given.\r\n        return new HttpHeaderResponse({\r\n            headers: update.headers || this.headers,\r\n            status: update.status !== undefined ? update.status : this.status,\r\n            statusText: update.statusText || this.statusText,\r\n            url: update.url || this.url || undefined,\r\n        });\r\n    }\r\n}\r\n/**\r\n * A full HTTP response, including a typed response body (which may be `null`\r\n * if one was not returned).\r\n *\r\n * `HttpResponse` is a `HttpEvent` available on the response event\r\n * stream.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpResponse extends HttpResponseBase {\r\n    /**\r\n     * Construct a new `HttpResponse`.\r\n     */\r\n    constructor(init = {}) {\r\n        super(init);\r\n        this.type = HttpEventType.Response;\r\n        this.body = init.body !== undefined ? init.body : null;\r\n    }\r\n    clone(update = {}) {\r\n        return new HttpResponse({\r\n            body: (update.body !== undefined) ? update.body : this.body,\r\n            headers: update.headers || this.headers,\r\n            status: (update.status !== undefined) ? update.status : this.status,\r\n            statusText: update.statusText || this.statusText,\r\n            url: update.url || this.url || undefined,\r\n        });\r\n    }\r\n}\r\n/**\r\n * A response that represents an error or failure, either from a\r\n * non-successful HTTP status, an error while executing the request,\r\n * or some other failure which occurred during the parsing of the response.\r\n *\r\n * Any error returned on the `Observable` response stream will be\r\n * wrapped in an `HttpErrorResponse` to provide additional context about\r\n * the state of the HTTP layer when the error occurred. The error property\r\n * will contain either a wrapped Error object or the error response returned\r\n * from the server.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpErrorResponse extends HttpResponseBase {\r\n    constructor(init) {\r\n        // Initialize with a default status of 0 / Unknown Error.\r\n        super(init, 0, 'Unknown Error');\r\n        this.name = 'HttpErrorResponse';\r\n        /**\r\n         * Errors are never okay, even when the status code is in the 2xx success range.\r\n         */\r\n        this.ok = false;\r\n        // If the response was successful, then this was a parse error. Otherwise, it was\r\n        // a protocol-level failure of some sort. Either the request failed in transit\r\n        // or the server returned an unsuccessful status code.\r\n        if (this.status >= 200 && this.status < 300) {\r\n            this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\r\n        }\r\n        else {\r\n            this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\r\n        }\r\n        this.error = init.error || null;\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\r\n * the given `body`. This function clones the object and adds the body.\r\n *\r\n * Note that the `responseType` *options* value is a String that identifies the\r\n * single data type of the response.\r\n * A single overload version of the method handles each response type.\r\n * The value of `responseType` cannot be a union, as the combined signature could imply.\r\n *\r\n */\r\nfunction addBody(options, body) {\r\n    return {\r\n        body,\r\n        headers: options.headers,\r\n        observe: options.observe,\r\n        params: options.params,\r\n        reportProgress: options.reportProgress,\r\n        responseType: options.responseType,\r\n        withCredentials: options.withCredentials,\r\n    };\r\n}\r\n/**\r\n * Performs HTTP requests.\r\n * This service is available as an injectable class, with methods to perform HTTP requests.\r\n * Each request method has multiple signatures, and the return type varies based on\r\n * the signature that is called (mainly the values of `observe` and `responseType`).\r\n *\r\n * Note that the `responseType` *options* value is a String that identifies the\r\n * single data type of the response.\r\n * A single overload version of the method handles each response type.\r\n * The value of `responseType` cannot be a union, as the combined signature could imply.\r\n\r\n *\r\n * @usageNotes\r\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/toh-pt0) application.\r\n *\r\n * ### HTTP Request Example\r\n *\r\n * ```\r\n *  // GET heroes whose name contains search term\r\n * searchHeroes(term: string): observable<Hero[]>{\r\n *\r\n *  const params = new HttpParams({fromString: 'name=term'});\r\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\r\n * }\r\n * ```\r\n * ### JSONP Example\r\n * ```\r\n * requestJsonp(url, callback = 'callback') {\r\n *  return this.httpClient.jsonp(this.heroesURL, callback);\r\n * }\r\n * ```\r\n *\r\n * ### PATCH Example\r\n * ```\r\n * // PATCH one of the heroes' name\r\n * patchHero (id: number, heroName: string): Observable<{}> {\r\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\r\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\r\n *    .pipe(catchError(this.handleError('patchHero')));\r\n * }\r\n * ```\r\n *\r\n * @see [HTTP Guide](guide/http)\r\n *\r\n * @publicApi\r\n */\r\nclass HttpClient {\r\n    constructor(handler) {\r\n        this.handler = handler;\r\n    }\r\n    /**\r\n     * Constructs an observable for a generic HTTP request that, when subscribed,\r\n     * fires the request through the chain of registered interceptors and on to the\r\n     * server.\r\n     *\r\n     * You can pass an `HttpRequest` directly as the only parameter. In this case,\r\n     * the call returns an observable of the raw `HttpEvent` stream.\r\n     *\r\n     * Alternatively you can pass an HTTP method as the first parameter,\r\n     * a URL string as the second, and an options hash containing the request body as the third.\r\n     * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\r\n     * type of returned observable.\r\n     *   * The `responseType` value determines how a successful response body is parsed.\r\n     *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\r\n     * object as a type parameter to the call.\r\n     *\r\n     * The `observe` value determines the return type, according to what you are interested in\r\n     * observing.\r\n     *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\r\n     * progress events by default.\r\n     *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\r\n     * where the `T` parameter depends on the `responseType` and any optionally provided type\r\n     * parameter.\r\n     *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\r\n     *\r\n     */\r\n    request(first, url, options = {}) {\r\n        let req;\r\n        // First, check whether the primary argument is an instance of `HttpRequest`.\r\n        if (first instanceof HttpRequest) {\r\n            // It is. The other arguments must be undefined (per the signatures) and can be\r\n            // ignored.\r\n            req = first;\r\n        }\r\n        else {\r\n            // It's a string, so it represents a URL. Construct a request based on it,\r\n            // and incorporate the remaining arguments (assuming `GET` unless a method is\r\n            // provided.\r\n            // Figure out the headers.\r\n            let headers = undefined;\r\n            if (options.headers instanceof HttpHeaders) {\r\n                headers = options.headers;\r\n            }\r\n            else {\r\n                headers = new HttpHeaders(options.headers);\r\n            }\r\n            // Sort out parameters.\r\n            let params = undefined;\r\n            if (!!options.params) {\r\n                if (options.params instanceof HttpParams) {\r\n                    params = options.params;\r\n                }\r\n                else {\r\n                    params = new HttpParams({ fromObject: options.params });\r\n                }\r\n            }\r\n            // Construct the request.\r\n            req = new HttpRequest(first, url, (options.body !== undefined ? options.body : null), {\r\n                headers,\r\n                params,\r\n                reportProgress: options.reportProgress,\r\n                // By default, JSON is assumed to be returned for all calls.\r\n                responseType: options.responseType || 'json',\r\n                withCredentials: options.withCredentials,\r\n            });\r\n        }\r\n        // Start with an Observable.of() the initial request, and run the handler (which\r\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\r\n        // inside an Observable chain, which causes interceptors to be re-run on every\r\n        // subscription (this also makes retries re-run the handler, including interceptors).\r\n        const events$ = of(req).pipe(concatMap((req) => this.handler.handle(req)));\r\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\r\n        // the only option is to get the event stream. Otherwise, return the event stream if\r\n        // that is what was requested.\r\n        if (first instanceof HttpRequest || options.observe === 'events') {\r\n            return events$;\r\n        }\r\n        // The requested stream contains either the full response or the body. In either\r\n        // case, the first step is to filter the event stream to extract a stream of\r\n        // responses(s).\r\n        const res$ = events$.pipe(filter((event) => event instanceof HttpResponse));\r\n        // Decide which stream to return.\r\n        switch (options.observe || 'body') {\r\n            case 'body':\r\n                // The requested stream is the body. Map the response stream to the response\r\n                // body. This could be done more simply, but a misbehaving interceptor might\r\n                // transform the response body into a different format and ignore the requested\r\n                // responseType. Guard against this by validating that the response is of the\r\n                // requested type.\r\n                switch (req.responseType) {\r\n                    case 'arraybuffer':\r\n                        return res$.pipe(map((res) => {\r\n                            // Validate that the body is an ArrayBuffer.\r\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\r\n                                throw new Error('Response is not an ArrayBuffer.');\r\n                            }\r\n                            return res.body;\r\n                        }));\r\n                    case 'blob':\r\n                        return res$.pipe(map((res) => {\r\n                            // Validate that the body is a Blob.\r\n                            if (res.body !== null && !(res.body instanceof Blob)) {\r\n                                throw new Error('Response is not a Blob.');\r\n                            }\r\n                            return res.body;\r\n                        }));\r\n                    case 'text':\r\n                        return res$.pipe(map((res) => {\r\n                            // Validate that the body is a string.\r\n                            if (res.body !== null && typeof res.body !== 'string') {\r\n                                throw new Error('Response is not a string.');\r\n                            }\r\n                            return res.body;\r\n                        }));\r\n                    case 'json':\r\n                    default:\r\n                        // No validation needed for JSON responses, as they can be of any type.\r\n                        return res$.pipe(map((res) => res.body));\r\n                }\r\n            case 'response':\r\n                // The response stream was requested directly, so return it.\r\n                return res$;\r\n            default:\r\n                // Guard against new future observe types being added.\r\n                throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\r\n        }\r\n    }\r\n    /**\r\n     * Constructs an observable that, when subscribed, causes the configured\r\n     * `DELETE` request to execute on the server. See the individual overloads for\r\n     * details on the return type.\r\n     *\r\n     * @param url     The endpoint URL.\r\n     * @param options The HTTP options to send with the request.\r\n     *\r\n     */\r\n    delete(url, options = {}) {\r\n        return this.request('DELETE', url, options);\r\n    }\r\n    /**\r\n     * Constructs an observable that, when subscribed, causes the configured\r\n     * `GET` request to execute on the server. See the individual overloads for\r\n     * details on the return type.\r\n     */\r\n    get(url, options = {}) {\r\n        return this.request('GET', url, options);\r\n    }\r\n    /**\r\n     * Constructs an observable that, when subscribed, causes the configured\r\n     * `HEAD` request to execute on the server. The `HEAD` method returns\r\n     * meta information about the resource without transferring the\r\n     * resource itself. See the individual overloads for\r\n     * details on the return type.\r\n     */\r\n    head(url, options = {}) {\r\n        return this.request('HEAD', url, options);\r\n    }\r\n    /**\r\n     * Constructs an `Observable` that, when subscribed, causes a request with the special method\r\n     * `JSONP` to be dispatched via the interceptor pipeline.\r\n     * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\r\n     * API endpoints that don't support newer,\r\n     * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\r\n     * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\r\n     * requests even if the API endpoint is not located on the same domain (origin) as the client-side\r\n     * application making the request.\r\n     * The endpoint API must support JSONP callback for JSONP requests to work.\r\n     * The resource API returns the JSON response wrapped in a callback function.\r\n     * You can pass the callback function name as one of the query parameters.\r\n     * Note that JSONP requests can only be used with `GET` requests.\r\n     *\r\n     * @param url The resource URL.\r\n     * @param callbackParam The callback function name.\r\n     *\r\n     */\r\n    jsonp(url, callbackParam) {\r\n        return this.request('JSONP', url, {\r\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\r\n            observe: 'body',\r\n            responseType: 'json',\r\n        });\r\n    }\r\n    /**\r\n     * Constructs an `Observable` that, when subscribed, causes the configured\r\n     * `OPTIONS` request to execute on the server. This method allows the client\r\n     * to determine the supported HTTP methods and other capabilites of an endpoint,\r\n     * without implying a resource action. See the individual overloads for\r\n     * details on the return type.\r\n     */\r\n    options(url, options = {}) {\r\n        return this.request('OPTIONS', url, options);\r\n    }\r\n    /**\r\n     * Constructs an observable that, when subscribed, causes the configured\r\n     * `PATCH` request to execute on the server. See the individual overloads for\r\n     * details on the return type.\r\n     */\r\n    patch(url, body, options = {}) {\r\n        return this.request('PATCH', url, addBody(options, body));\r\n    }\r\n    /**\r\n     * Constructs an observable that, when subscribed, causes the configured\r\n     * `POST` request to execute on the server. The server responds with the location of\r\n     * the replaced resource. See the individual overloads for\r\n     * details on the return type.\r\n     */\r\n    post(url, body, options = {}) {\r\n        return this.request('POST', url, addBody(options, body));\r\n    }\r\n    /**\r\n     * Constructs an observable that, when subscribed, causes the configured\r\n     * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\r\n     * with a new set of values.\r\n     * See the individual overloads for details on the return type.\r\n     */\r\n    put(url, body, options = {}) {\r\n        return this.request('PUT', url, addBody(options, body));\r\n    }\r\n}\r\nHttpClient.ɵfac = function HttpClient_Factory(t) { return new (t || HttpClient)(ɵngcc0.ɵɵinject(HttpHandler)); };\r\nHttpClient.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: HttpClient, factory: HttpClient.ɵfac });\r\nHttpClient.ctorParameters = () => [\r\n    { type: HttpHandler }\r\n];\r\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HttpClient, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: HttpHandler }]; }, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\r\n *\r\n *\r\n */\r\nclass HttpInterceptorHandler {\r\n    constructor(next, interceptor) {\r\n        this.next = next;\r\n        this.interceptor = interceptor;\r\n    }\r\n    handle(req) {\r\n        return this.interceptor.intercept(req, this.next);\r\n    }\r\n}\r\n/**\r\n * A multi-provider token that represents the array of registered\r\n * `HttpInterceptor` objects.\r\n *\r\n * @publicApi\r\n */\r\nconst HTTP_INTERCEPTORS = new InjectionToken('HTTP_INTERCEPTORS');\r\nclass NoopInterceptor {\r\n    intercept(req, next) {\r\n        return next.handle(req);\r\n    }\r\n}\r\nNoopInterceptor.ɵfac = function NoopInterceptor_Factory(t) { return new (t || NoopInterceptor)(); };\r\nNoopInterceptor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NoopInterceptor, factory: NoopInterceptor.ɵfac });\r\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NoopInterceptor, [{\r\n        type: Injectable\r\n    }], null, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// Every request made through JSONP needs a callback name that's unique across the\r\n// whole page. Each request is assigned an id and the callback name is constructed\r\n// from that. The next id to be assigned is tracked in a global variable here that\r\n// is shared among all applications on the page.\r\nlet nextRequestId = 0;\r\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\r\n// passed in its URL.\r\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\r\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\r\n// have a request method JSONP.\r\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\r\nconst JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\r\n/**\r\n * DI token/abstract type representing a map of JSONP callbacks.\r\n *\r\n * In the browser, this should always be the `window` object.\r\n *\r\n *\r\n */\r\nclass JsonpCallbackContext {\r\n}\r\n/**\r\n * Processes an `HttpRequest` with the JSONP method,\r\n * by performing JSONP style requests.\r\n * @see `HttpHandler`\r\n * @see `HttpXhrBackend`\r\n *\r\n * @publicApi\r\n */\r\nclass JsonpClientBackend {\r\n    constructor(callbackMap, document) {\r\n        this.callbackMap = callbackMap;\r\n        this.document = document;\r\n    }\r\n    /**\r\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\r\n     */\r\n    nextCallback() {\r\n        return `ng_jsonp_callback_${nextRequestId++}`;\r\n    }\r\n    /**\r\n     * Processes a JSONP request and returns an event stream of the results.\r\n     * @param req The request object.\r\n     * @returns An observable of the response events.\r\n     *\r\n     */\r\n    handle(req) {\r\n        // Firstly, check both the method and response type. If either doesn't match\r\n        // then the request was improperly routed here and cannot be handled.\r\n        if (req.method !== 'JSONP') {\r\n            throw new Error(JSONP_ERR_WRONG_METHOD);\r\n        }\r\n        else if (req.responseType !== 'json') {\r\n            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\r\n        }\r\n        // Everything else happens inside the Observable boundary.\r\n        return new Observable((observer) => {\r\n            // The first step to make a request is to generate the callback name, and replace the\r\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\r\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\r\n            const callback = this.nextCallback();\r\n            const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\r\n            // Construct the <script> tag and point it at the URL.\r\n            const node = this.document.createElement('script');\r\n            node.src = url;\r\n            // A JSONP request requires waiting for multiple callbacks. These variables\r\n            // are closed over and track state across those callbacks.\r\n            // The response object, if one has been received, or null otherwise.\r\n            let body = null;\r\n            // Whether the response callback has been called.\r\n            let finished = false;\r\n            // Whether the request has been cancelled (and thus any other callbacks)\r\n            // should be ignored.\r\n            let cancelled = false;\r\n            // Set the response callback in this.callbackMap (which will be the window\r\n            // object in the browser. The script being loaded via the <script> tag will\r\n            // eventually call this callback.\r\n            this.callbackMap[callback] = (data) => {\r\n                // Data has been received from the JSONP script. Firstly, delete this callback.\r\n                delete this.callbackMap[callback];\r\n                // Next, make sure the request wasn't cancelled in the meantime.\r\n                if (cancelled) {\r\n                    return;\r\n                }\r\n                // Set state to indicate data was received.\r\n                body = data;\r\n                finished = true;\r\n            };\r\n            // cleanup() is a utility closure that removes the <script> from the page and\r\n            // the response callback from the window. This logic is used in both the\r\n            // success, error, and cancellation paths, so it's extracted out for convenience.\r\n            const cleanup = () => {\r\n                // Remove the <script> tag if it's still on the page.\r\n                if (node.parentNode) {\r\n                    node.parentNode.removeChild(node);\r\n                }\r\n                // Remove the response callback from the callbackMap (window object in the\r\n                // browser).\r\n                delete this.callbackMap[callback];\r\n            };\r\n            // onLoad() is the success callback which runs after the response callback\r\n            // if the JSONP script loads successfully. The event itself is unimportant.\r\n            // If something went wrong, onLoad() may run without the response callback\r\n            // having been invoked.\r\n            const onLoad = (event) => {\r\n                // Do nothing if the request has been cancelled.\r\n                if (cancelled) {\r\n                    return;\r\n                }\r\n                // Cleanup the page.\r\n                cleanup();\r\n                // Check whether the response callback has run.\r\n                if (!finished) {\r\n                    // It hasn't, something went wrong with the request. Return an error via\r\n                    // the Observable error path. All JSONP errors have status 0.\r\n                    observer.error(new HttpErrorResponse({\r\n                        url,\r\n                        status: 0,\r\n                        statusText: 'JSONP Error',\r\n                        error: new Error(JSONP_ERR_NO_CALLBACK),\r\n                    }));\r\n                    return;\r\n                }\r\n                // Success. body either contains the response body or null if none was\r\n                // returned.\r\n                observer.next(new HttpResponse({\r\n                    body,\r\n                    status: 200,\r\n                    statusText: 'OK',\r\n                    url,\r\n                }));\r\n                // Complete the stream, the response is over.\r\n                observer.complete();\r\n            };\r\n            // onError() is the error callback, which runs if the script returned generates\r\n            // a Javascript error. It emits the error via the Observable error channel as\r\n            // a HttpErrorResponse.\r\n            const onError = (error) => {\r\n                // If the request was already cancelled, no need to emit anything.\r\n                if (cancelled) {\r\n                    return;\r\n                }\r\n                cleanup();\r\n                // Wrap the error in a HttpErrorResponse.\r\n                observer.error(new HttpErrorResponse({\r\n                    error,\r\n                    status: 0,\r\n                    statusText: 'JSONP Error',\r\n                    url,\r\n                }));\r\n            };\r\n            // Subscribe to both the success (load) and error events on the <script> tag,\r\n            // and add it to the page.\r\n            node.addEventListener('load', onLoad);\r\n            node.addEventListener('error', onError);\r\n            this.document.body.appendChild(node);\r\n            // The request has now been successfully sent.\r\n            observer.next({ type: HttpEventType.Sent });\r\n            // Cancellation handler.\r\n            return () => {\r\n                // Track the cancellation so event listeners won't do anything even if already scheduled.\r\n                cancelled = true;\r\n                // Remove the event listeners so they won't run if the events later fire.\r\n                node.removeEventListener('load', onLoad);\r\n                node.removeEventListener('error', onError);\r\n                // And finally, clean up the page.\r\n                cleanup();\r\n            };\r\n        });\r\n    }\r\n}\r\nJsonpClientBackend.ɵfac = function JsonpClientBackend_Factory(t) { return new (t || JsonpClientBackend)(ɵngcc0.ɵɵinject(JsonpCallbackContext), ɵngcc0.ɵɵinject(DOCUMENT)); };\r\nJsonpClientBackend.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: JsonpClientBackend, factory: JsonpClientBackend.ɵfac });\r\nJsonpClientBackend.ctorParameters = () => [\r\n    { type: JsonpCallbackContext },\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\r\n];\r\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JsonpClientBackend, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: JsonpCallbackContext }, { type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [DOCUMENT]\r\n            }] }]; }, null); })();\r\n/**\r\n * Identifies requests with the method JSONP and\r\n * shifts them to the `JsonpClientBackend`.\r\n *\r\n * @see `HttpInterceptor`\r\n *\r\n * @publicApi\r\n */\r\nclass JsonpInterceptor {\r\n    constructor(jsonp) {\r\n        this.jsonp = jsonp;\r\n    }\r\n    /**\r\n     * Identifies and handles a given JSONP request.\r\n     * @param req The outgoing request object to handle.\r\n     * @param next The next interceptor in the chain, or the backend\r\n     * if no interceptors remain in the chain.\r\n     * @returns An observable of the event stream.\r\n     */\r\n    intercept(req, next) {\r\n        if (req.method === 'JSONP') {\r\n            return this.jsonp.handle(req);\r\n        }\r\n        // Fall through for normal HTTP requests.\r\n        return next.handle(req);\r\n    }\r\n}\r\nJsonpInterceptor.ɵfac = function JsonpInterceptor_Factory(t) { return new (t || JsonpInterceptor)(ɵngcc0.ɵɵinject(JsonpClientBackend)); };\r\nJsonpInterceptor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: JsonpInterceptor, factory: JsonpInterceptor.ɵfac });\r\nJsonpInterceptor.ctorParameters = () => [\r\n    { type: JsonpClientBackend }\r\n];\r\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JsonpInterceptor, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: JsonpClientBackend }]; }, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\r\n/**\r\n * Determine an appropriate URL for the response, by checking either\r\n * XMLHttpRequest.responseURL or the X-Request-URL header.\r\n */\r\nfunction getResponseUrl(xhr) {\r\n    if ('responseURL' in xhr && xhr.responseURL) {\r\n        return xhr.responseURL;\r\n    }\r\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\r\n        return xhr.getResponseHeader('X-Request-URL');\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * A wrapper around the `XMLHttpRequest` constructor.\r\n *\r\n * @publicApi\r\n */\r\nclass XhrFactory {\r\n}\r\n/**\r\n * A factory for `HttpXhrBackend` that uses the `XMLHttpRequest` browser API.\r\n *\r\n */\r\nclass BrowserXhr {\r\n    constructor() { }\r\n    build() {\r\n        return (new XMLHttpRequest());\r\n    }\r\n}\r\nBrowserXhr.ɵfac = function BrowserXhr_Factory(t) { return new (t || BrowserXhr)(); };\r\nBrowserXhr.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: BrowserXhr, factory: BrowserXhr.ɵfac });\r\nBrowserXhr.ctorParameters = () => [];\r\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BrowserXhr, [{\r\n        type: Injectable\r\n    }], function () { return []; }, null); })();\r\n/**\r\n * Uses `XMLHttpRequest` to send requests to a backend server.\r\n * @see `HttpHandler`\r\n * @see `JsonpClientBackend`\r\n *\r\n * @publicApi\r\n */\r\nclass HttpXhrBackend {\r\n    constructor(xhrFactory) {\r\n        this.xhrFactory = xhrFactory;\r\n    }\r\n    /**\r\n     * Processes a request and returns a stream of response events.\r\n     * @param req The request object.\r\n     * @returns An observable of the response events.\r\n     */\r\n    handle(req) {\r\n        // Quick check to give a better error message when a user attempts to use\r\n        // HttpClient.jsonp() without installing the JsonpClientModule\r\n        if (req.method === 'JSONP') {\r\n            throw new Error(`Attempted to construct Jsonp request without JsonpClientModule installed.`);\r\n        }\r\n        // Everything happens on Observable subscription.\r\n        return new Observable((observer) => {\r\n            // Start by setting up the XHR object with request method, URL, and withCredentials flag.\r\n            const xhr = this.xhrFactory.build();\r\n            xhr.open(req.method, req.urlWithParams);\r\n            if (!!req.withCredentials) {\r\n                xhr.withCredentials = true;\r\n            }\r\n            // Add all the requested headers.\r\n            req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(',')));\r\n            // Add an Accept header if one isn't present already.\r\n            if (!req.headers.has('Accept')) {\r\n                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\r\n            }\r\n            // Auto-detect the Content-Type header if one isn't present already.\r\n            if (!req.headers.has('Content-Type')) {\r\n                const detectedType = req.detectContentTypeHeader();\r\n                // Sometimes Content-Type detection fails.\r\n                if (detectedType !== null) {\r\n                    xhr.setRequestHeader('Content-Type', detectedType);\r\n                }\r\n            }\r\n            // Set the responseType if one was requested.\r\n            if (req.responseType) {\r\n                const responseType = req.responseType.toLowerCase();\r\n                // JSON responses need to be processed as text. This is because if the server\r\n                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\r\n                // xhr.response will be null, and xhr.responseText cannot be accessed to\r\n                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\r\n                // is parsed by first requesting text and then applying JSON.parse.\r\n                xhr.responseType = ((responseType !== 'json') ? responseType : 'text');\r\n            }\r\n            // Serialize the request body if one is present. If not, this will be set to null.\r\n            const reqBody = req.serializeBody();\r\n            // If progress events are enabled, response headers will be delivered\r\n            // in two events - the HttpHeaderResponse event and the full HttpResponse\r\n            // event. However, since response headers don't change in between these\r\n            // two events, it doesn't make sense to parse them twice. So headerResponse\r\n            // caches the data extracted from the response whenever it's first parsed,\r\n            // to ensure parsing isn't duplicated.\r\n            let headerResponse = null;\r\n            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\r\n            // state, and memoizes it into headerResponse.\r\n            const partialFromXhr = () => {\r\n                if (headerResponse !== null) {\r\n                    return headerResponse;\r\n                }\r\n                // Read status and normalize an IE9 bug (http://bugs.jquery.com/ticket/1450).\r\n                const status = xhr.status === 1223 ? 204 : xhr.status;\r\n                const statusText = xhr.statusText || 'OK';\r\n                // Parse headers from XMLHttpRequest - this step is lazy.\r\n                const headers = new HttpHeaders(xhr.getAllResponseHeaders());\r\n                // Read the response URL from the XMLHttpResponse instance and fall back on the\r\n                // request URL.\r\n                const url = getResponseUrl(xhr) || req.url;\r\n                // Construct the HttpHeaderResponse and memoize it.\r\n                headerResponse = new HttpHeaderResponse({ headers, status, statusText, url });\r\n                return headerResponse;\r\n            };\r\n            // Next, a few closures are defined for the various events which XMLHttpRequest can\r\n            // emit. This allows them to be unregistered as event listeners later.\r\n            // First up is the load event, which represents a response being fully available.\r\n            const onLoad = () => {\r\n                // Read response state from the memoized partial data.\r\n                let { headers, status, statusText, url } = partialFromXhr();\r\n                // The body will be read out if present.\r\n                let body = null;\r\n                if (status !== 204) {\r\n                    // Use XMLHttpRequest.response if set, responseText otherwise.\r\n                    body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\r\n                }\r\n                // Normalize another potential bug (this one comes from CORS).\r\n                if (status === 0) {\r\n                    status = !!body ? 200 : 0;\r\n                }\r\n                // ok determines whether the response will be transmitted on the event or\r\n                // error channel. Unsuccessful status codes (not 2xx) will always be errors,\r\n                // but a successful status code can still result in an error if the user\r\n                // asked for JSON data and the body cannot be parsed as such.\r\n                let ok = status >= 200 && status < 300;\r\n                // Check whether the body needs to be parsed as JSON (in many cases the browser\r\n                // will have done that already).\r\n                if (req.responseType === 'json' && typeof body === 'string') {\r\n                    // Save the original body, before attempting XSSI prefix stripping.\r\n                    const originalBody = body;\r\n                    body = body.replace(XSSI_PREFIX, '');\r\n                    try {\r\n                        // Attempt the parse. If it fails, a parse error should be delivered to the user.\r\n                        body = body !== '' ? JSON.parse(body) : null;\r\n                    }\r\n                    catch (error) {\r\n                        // Since the JSON.parse failed, it's reasonable to assume this might not have been a\r\n                        // JSON response. Restore the original body (including any XSSI prefix) to deliver\r\n                        // a better error response.\r\n                        body = originalBody;\r\n                        // If this was an error request to begin with, leave it as a string, it probably\r\n                        // just isn't JSON. Otherwise, deliver the parsing error to the user.\r\n                        if (ok) {\r\n                            // Even though the response status was 2xx, this is still an error.\r\n                            ok = false;\r\n                            // The parse error contains the text of the body that failed to parse.\r\n                            body = { error, text: body };\r\n                        }\r\n                    }\r\n                }\r\n                if (ok) {\r\n                    // A successful response is delivered on the event stream.\r\n                    observer.next(new HttpResponse({\r\n                        body,\r\n                        headers,\r\n                        status,\r\n                        statusText,\r\n                        url: url || undefined,\r\n                    }));\r\n                    // The full body has been received and delivered, no further events\r\n                    // are possible. This request is complete.\r\n                    observer.complete();\r\n                }\r\n                else {\r\n                    // An unsuccessful request is delivered on the error channel.\r\n                    observer.error(new HttpErrorResponse({\r\n                        // The error in this case is the response body (error from the server).\r\n                        error: body,\r\n                        headers,\r\n                        status,\r\n                        statusText,\r\n                        url: url || undefined,\r\n                    }));\r\n                }\r\n            };\r\n            // The onError callback is called when something goes wrong at the network level.\r\n            // Connection timeout, DNS error, offline, etc. These are actual errors, and are\r\n            // transmitted on the error channel.\r\n            const onError = (error) => {\r\n                const { url } = partialFromXhr();\r\n                const res = new HttpErrorResponse({\r\n                    error,\r\n                    status: xhr.status || 0,\r\n                    statusText: xhr.statusText || 'Unknown Error',\r\n                    url: url || undefined,\r\n                });\r\n                observer.error(res);\r\n            };\r\n            // The sentHeaders flag tracks whether the HttpResponseHeaders event\r\n            // has been sent on the stream. This is necessary to track if progress\r\n            // is enabled since the event will be sent on only the first download\r\n            // progerss event.\r\n            let sentHeaders = false;\r\n            // The download progress event handler, which is only registered if\r\n            // progress events are enabled.\r\n            const onDownProgress = (event) => {\r\n                // Send the HttpResponseHeaders event if it hasn't been sent already.\r\n                if (!sentHeaders) {\r\n                    observer.next(partialFromXhr());\r\n                    sentHeaders = true;\r\n                }\r\n                // Start building the download progress event to deliver on the response\r\n                // event stream.\r\n                let progressEvent = {\r\n                    type: HttpEventType.DownloadProgress,\r\n                    loaded: event.loaded,\r\n                };\r\n                // Set the total number of bytes in the event if it's available.\r\n                if (event.lengthComputable) {\r\n                    progressEvent.total = event.total;\r\n                }\r\n                // If the request was for text content and a partial response is\r\n                // available on XMLHttpRequest, include it in the progress event\r\n                // to allow for streaming reads.\r\n                if (req.responseType === 'text' && !!xhr.responseText) {\r\n                    progressEvent.partialText = xhr.responseText;\r\n                }\r\n                // Finally, fire the event.\r\n                observer.next(progressEvent);\r\n            };\r\n            // The upload progress event handler, which is only registered if\r\n            // progress events are enabled.\r\n            const onUpProgress = (event) => {\r\n                // Upload progress events are simpler. Begin building the progress\r\n                // event.\r\n                let progress = {\r\n                    type: HttpEventType.UploadProgress,\r\n                    loaded: event.loaded,\r\n                };\r\n                // If the total number of bytes being uploaded is available, include\r\n                // it.\r\n                if (event.lengthComputable) {\r\n                    progress.total = event.total;\r\n                }\r\n                // Send the event.\r\n                observer.next(progress);\r\n            };\r\n            // By default, register for load and error events.\r\n            xhr.addEventListener('load', onLoad);\r\n            xhr.addEventListener('error', onError);\r\n            // Progress events are only enabled if requested.\r\n            if (req.reportProgress) {\r\n                // Download progress is always enabled if requested.\r\n                xhr.addEventListener('progress', onDownProgress);\r\n                // Upload progress depends on whether there is a body to upload.\r\n                if (reqBody !== null && xhr.upload) {\r\n                    xhr.upload.addEventListener('progress', onUpProgress);\r\n                }\r\n            }\r\n            // Fire the request, and notify the event stream that it was fired.\r\n            xhr.send(reqBody);\r\n            observer.next({ type: HttpEventType.Sent });\r\n            // This is the return from the Observable function, which is the\r\n            // request cancellation handler.\r\n            return () => {\r\n                // On a cancellation, remove all registered event listeners.\r\n                xhr.removeEventListener('error', onError);\r\n                xhr.removeEventListener('load', onLoad);\r\n                if (req.reportProgress) {\r\n                    xhr.removeEventListener('progress', onDownProgress);\r\n                    if (reqBody !== null && xhr.upload) {\r\n                        xhr.upload.removeEventListener('progress', onUpProgress);\r\n                    }\r\n                }\r\n                // Finally, abort the in-flight request.\r\n                if (xhr.readyState !== xhr.DONE) {\r\n                    xhr.abort();\r\n                }\r\n            };\r\n        });\r\n    }\r\n}\r\nHttpXhrBackend.ɵfac = function HttpXhrBackend_Factory(t) { return new (t || HttpXhrBackend)(ɵngcc0.ɵɵinject(XhrFactory)); };\r\nHttpXhrBackend.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: HttpXhrBackend, factory: HttpXhrBackend.ɵfac });\r\nHttpXhrBackend.ctorParameters = () => [\r\n    { type: XhrFactory }\r\n];\r\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HttpXhrBackend, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: XhrFactory }]; }, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME');\r\nconst XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME');\r\n/**\r\n * Retrieves the current XSRF token to use with the next outgoing request.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpXsrfTokenExtractor {\r\n}\r\n/**\r\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\r\n */\r\nclass HttpXsrfCookieExtractor {\r\n    constructor(doc, platform, cookieName) {\r\n        this.doc = doc;\r\n        this.platform = platform;\r\n        this.cookieName = cookieName;\r\n        this.lastCookieString = '';\r\n        this.lastToken = null;\r\n        /**\r\n         * @internal for testing\r\n         */\r\n        this.parseCount = 0;\r\n    }\r\n    getToken() {\r\n        if (this.platform === 'server') {\r\n            return null;\r\n        }\r\n        const cookieString = this.doc.cookie || '';\r\n        if (cookieString !== this.lastCookieString) {\r\n            this.parseCount++;\r\n            this.lastToken = ɵparseCookieValue(cookieString, this.cookieName);\r\n            this.lastCookieString = cookieString;\r\n        }\r\n        return this.lastToken;\r\n    }\r\n}\r\nHttpXsrfCookieExtractor.ɵfac = function HttpXsrfCookieExtractor_Factory(t) { return new (t || HttpXsrfCookieExtractor)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(XSRF_COOKIE_NAME)); };\r\nHttpXsrfCookieExtractor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: HttpXsrfCookieExtractor, factory: HttpXsrfCookieExtractor.ɵfac });\r\nHttpXsrfCookieExtractor.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\r\n    { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\r\n    { type: String, decorators: [{ type: Inject, args: [XSRF_COOKIE_NAME,] }] }\r\n];\r\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HttpXsrfCookieExtractor, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [DOCUMENT]\r\n            }] }, { type: String, decorators: [{\r\n                type: Inject,\r\n                args: [PLATFORM_ID]\r\n            }] }, { type: String, decorators: [{\r\n                type: Inject,\r\n                args: [XSRF_COOKIE_NAME]\r\n            }] }]; }, null); })();\r\n/**\r\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\r\n */\r\nclass HttpXsrfInterceptor {\r\n    constructor(tokenService, headerName) {\r\n        this.tokenService = tokenService;\r\n        this.headerName = headerName;\r\n    }\r\n    intercept(req, next) {\r\n        const lcUrl = req.url.toLowerCase();\r\n        // Skip both non-mutating requests and absolute URLs.\r\n        // Non-mutating requests don't require a token, and absolute URLs require special handling\r\n        // anyway as the cookie set\r\n        // on our origin is not the same as the token expected by another origin.\r\n        if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||\r\n            lcUrl.startsWith('https://')) {\r\n            return next.handle(req);\r\n        }\r\n        const token = this.tokenService.getToken();\r\n        // Be careful not to overwrite an existing header of the same name.\r\n        if (token !== null && !req.headers.has(this.headerName)) {\r\n            req = req.clone({ headers: req.headers.set(this.headerName, token) });\r\n        }\r\n        return next.handle(req);\r\n    }\r\n}\r\nHttpXsrfInterceptor.ɵfac = function HttpXsrfInterceptor_Factory(t) { return new (t || HttpXsrfInterceptor)(ɵngcc0.ɵɵinject(HttpXsrfTokenExtractor), ɵngcc0.ɵɵinject(XSRF_HEADER_NAME)); };\r\nHttpXsrfInterceptor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: HttpXsrfInterceptor, factory: HttpXsrfInterceptor.ɵfac });\r\nHttpXsrfInterceptor.ctorParameters = () => [\r\n    { type: HttpXsrfTokenExtractor },\r\n    { type: String, decorators: [{ type: Inject, args: [XSRF_HEADER_NAME,] }] }\r\n];\r\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HttpXsrfInterceptor, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: HttpXsrfTokenExtractor }, { type: String, decorators: [{\r\n                type: Inject,\r\n                args: [XSRF_HEADER_NAME]\r\n            }] }]; }, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * An injectable `HttpHandler` that applies multiple interceptors\r\n * to a request before passing it to the given `HttpBackend`.\r\n *\r\n * The interceptors are loaded lazily from the injector, to allow\r\n * interceptors to themselves inject classes depending indirectly\r\n * on `HttpInterceptingHandler` itself.\r\n * @see `HttpInterceptor`\r\n */\r\nclass HttpInterceptingHandler {\r\n    constructor(backend, injector) {\r\n        this.backend = backend;\r\n        this.injector = injector;\r\n        this.chain = null;\r\n    }\r\n    handle(req) {\r\n        if (this.chain === null) {\r\n            const interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\r\n            this.chain = interceptors.reduceRight((next, interceptor) => new HttpInterceptorHandler(next, interceptor), this.backend);\r\n        }\r\n        return this.chain.handle(req);\r\n    }\r\n}\r\nHttpInterceptingHandler.ɵfac = function HttpInterceptingHandler_Factory(t) { return new (t || HttpInterceptingHandler)(ɵngcc0.ɵɵinject(HttpBackend), ɵngcc0.ɵɵinject(ɵngcc0.Injector)); };\r\nHttpInterceptingHandler.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: HttpInterceptingHandler, factory: HttpInterceptingHandler.ɵfac });\r\nHttpInterceptingHandler.ctorParameters = () => [\r\n    { type: HttpBackend },\r\n    { type: Injector }\r\n];\r\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HttpInterceptingHandler, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: HttpBackend }, { type: ɵngcc0.Injector }]; }, null); })();\r\n/**\r\n * Constructs an `HttpHandler` that applies interceptors\r\n * to a request before passing it to the given `HttpBackend`.\r\n *\r\n * Use as a factory function within `HttpClientModule`.\r\n *\r\n *\r\n */\r\nfunction interceptingHandler(backend, interceptors = []) {\r\n    if (!interceptors) {\r\n        return backend;\r\n    }\r\n    return interceptors.reduceRight((next, interceptor) => new HttpInterceptorHandler(next, interceptor), backend);\r\n}\r\n/**\r\n * Factory function that determines where to store JSONP callbacks.\r\n *\r\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\r\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\r\n *\r\n *\r\n */\r\nfunction jsonpCallbackContext() {\r\n    if (typeof window === 'object') {\r\n        return window;\r\n    }\r\n    return {};\r\n}\r\n/**\r\n * Configures XSRF protection support for outgoing requests.\r\n *\r\n * For a server that supports a cookie-based XSRF protection system,\r\n * use directly to configure XSRF protection with the correct\r\n * cookie and header names.\r\n *\r\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\r\n * and the default header name is `X-XSRF-TOKEN`.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpClientXsrfModule {\r\n    /**\r\n     * Disable the default XSRF protection.\r\n     */\r\n    static disable() {\r\n        return {\r\n            ngModule: HttpClientXsrfModule,\r\n            providers: [\r\n                { provide: HttpXsrfInterceptor, useClass: NoopInterceptor },\r\n            ],\r\n        };\r\n    }\r\n    /**\r\n     * Configure XSRF protection.\r\n     * @param options An object that can specify either or both\r\n     * cookie name or header name.\r\n     * - Cookie name default is `XSRF-TOKEN`.\r\n     * - Header name default is `X-XSRF-TOKEN`.\r\n     *\r\n     */\r\n    static withOptions(options = {}) {\r\n        return {\r\n            ngModule: HttpClientXsrfModule,\r\n            providers: [\r\n                options.cookieName ? { provide: XSRF_COOKIE_NAME, useValue: options.cookieName } : [],\r\n                options.headerName ? { provide: XSRF_HEADER_NAME, useValue: options.headerName } : [],\r\n            ],\r\n        };\r\n    }\r\n}\r\nHttpClientXsrfModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: HttpClientXsrfModule });\r\nHttpClientXsrfModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function HttpClientXsrfModule_Factory(t) { return new (t || HttpClientXsrfModule)(); }, providers: [\r\n        HttpXsrfInterceptor,\r\n        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\r\n        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\r\n        { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\r\n        { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\r\n    ] });\r\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HttpClientXsrfModule, [{\r\n        type: NgModule,\r\n        args: [{\r\n                providers: [\r\n                    HttpXsrfInterceptor,\r\n                    { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\r\n                    { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\r\n                    { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\r\n                    { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\r\n                ]\r\n            }]\r\n    }], null, null); })();\r\n/**\r\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\r\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\r\n *\r\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\r\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpClientModule {\r\n}\r\nHttpClientModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: HttpClientModule });\r\nHttpClientModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function HttpClientModule_Factory(t) { return new (t || HttpClientModule)(); }, providers: [\r\n        HttpClient,\r\n        { provide: HttpHandler, useClass: HttpInterceptingHandler },\r\n        HttpXhrBackend,\r\n        { provide: HttpBackend, useExisting: HttpXhrBackend },\r\n        BrowserXhr,\r\n        { provide: XhrFactory, useExisting: BrowserXhr },\r\n    ], imports: [[\r\n            HttpClientXsrfModule.withOptions({\r\n                cookieName: 'XSRF-TOKEN',\r\n                headerName: 'X-XSRF-TOKEN'\r\n            }),\r\n        ]] });\r\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(HttpClientModule, { imports: [HttpClientXsrfModule] }); })();\r\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HttpClientModule, [{\r\n        type: NgModule,\r\n        args: [{\r\n                /**\r\n                 * Optional configuration for XSRF protection.\r\n                 */\r\n                imports: [\r\n                    HttpClientXsrfModule.withOptions({\r\n                        cookieName: 'XSRF-TOKEN',\r\n                        headerName: 'X-XSRF-TOKEN'\r\n                    }),\r\n                ],\r\n                /**\r\n                 * Configures the [dependency injector](guide/glossary#injector) where it is imported\r\n                 * with supporting services for HTTP communications.\r\n                 */\r\n                providers: [\r\n                    HttpClient,\r\n                    { provide: HttpHandler, useClass: HttpInterceptingHandler },\r\n                    HttpXhrBackend,\r\n                    { provide: HttpBackend, useExisting: HttpXhrBackend },\r\n                    BrowserXhr,\r\n                    { provide: XhrFactory, useExisting: BrowserXhr },\r\n                ]\r\n            }]\r\n    }], null, null); })();\r\n/**\r\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\r\n * with supporting services for JSONP.\r\n * Without this module, Jsonp requests reach the backend\r\n * with method JSONP, where they are rejected.\r\n *\r\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\r\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpClientJsonpModule {\r\n}\r\nHttpClientJsonpModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: HttpClientJsonpModule });\r\nHttpClientJsonpModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function HttpClientJsonpModule_Factory(t) { return new (t || HttpClientJsonpModule)(); }, providers: [\r\n        JsonpClientBackend,\r\n        { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\r\n        { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\r\n    ] });\r\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HttpClientJsonpModule, [{\r\n        type: NgModule,\r\n        args: [{\r\n                providers: [\r\n                    JsonpClientBackend,\r\n                    { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\r\n                    { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\r\n                ]\r\n            }]\r\n    }], null, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { HTTP_INTERCEPTORS, HttpBackend, HttpClient, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpErrorResponse, HttpEventType, HttpHandler, HttpHeaderResponse, HttpHeaders, HttpParams, HttpRequest, HttpResponse, HttpResponseBase, HttpUrlEncodingCodec, HttpXhrBackend, HttpXsrfTokenExtractor, JsonpClientBackend, JsonpInterceptor, XhrFactory, HttpInterceptingHandler as ɵHttpInterceptingHandler, NoopInterceptor as ɵangular_packages_common_http_http_a, JsonpCallbackContext as ɵangular_packages_common_http_http_b, jsonpCallbackContext as ɵangular_packages_common_http_http_c, BrowserXhr as ɵangular_packages_common_http_http_d, XSRF_COOKIE_NAME as ɵangular_packages_common_http_http_e, XSRF_HEADER_NAME as ɵangular_packages_common_http_http_f, HttpXsrfCookieExtractor as ɵangular_packages_common_http_http_g, HttpXsrfInterceptor as ɵangular_packages_common_http_http_h };\r\n\r\n//# sourceMappingURL=http.js.map","export default \"<ion-header>\\r\\n  <ion-toolbar>\\r\\n    <ion-buttons slot=\\\"start\\\">\\r\\n      <ion-menu-button></ion-menu-button>\\r\\n    </ion-buttons>\\r\\n    <ion-title>{{title}} news</ion-title>\\r\\n  </ion-toolbar>\\r\\n</ion-header>\\r\\n\\r\\n<ion-content [fullscreen]=\\\"true\\\">\\r\\n  <ion-header collapse=\\\"condense\\\">\\r\\n    <ion-toolbar>\\r\\n      <ion-title size=\\\"large\\\">{{title}} news</ion-title>\\r\\n    </ion-toolbar>\\r\\n  </ion-header>\\r\\n\\r\\n  <ion-refresher slot=\\\"fixed\\\" (ionRefresh)=\\\"efeitoRefresh($event)\\\">\\r\\n    <ion-refresher-content></ion-refresher-content>\\r\\n  </ion-refresher>\\r\\n\\r\\n  <ion-card *ngFor = \\\"let news of lista_news\\\" href={{news.url}}>\\r\\n    <ion-card-header>\\r\\n      <ion-img src={{news.urlToImage}}></ion-img>\\r\\n      <br>\\r\\n      <ion-card-subtitle>{{news.publishedAt}}</ion-card-subtitle>\\r\\n      <ion-card-title>{{news.title}}</ion-card-title>\\r\\n    </ion-card-header>\\r\\n    <ion-card-content>\\r\\n      {{news.description}}\\r\\n    </ion-card-content>\\r\\n  </ion-card>\\r\\n\\r\\n  <ion-infinite-scroll threshold=\\\"100px\\\" (ionInfinite)=\\\"efeitoScrollInfinito($event)\\\">\\r\\n    <ion-infinite-scroll-content\\r\\n      loadingSpinner=\\\"circular\\\"\\r\\n      loadingText=\\\"Carregando mais notícias...\\\">\\r\\n    </ion-infinite-scroll-content>\\r\\n  </ion-infinite-scroll>\\r\\n</ion-content>\";","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NewsApiService {\r\n\r\n  private chave:string = \"a192006ac51443b085001c4a7485c2e0\";\r\n  private caminhoPadrao:string = \"https://newsapi.org/v2\";\r\n\r\n\r\n  constructor(public http:HttpClient) { }\r\n\r\n  public getEverythingAbout(assunto:string, page = 1, resultsPerPage=20){\r\n    let result = `${this.caminhoPadrao}/everything?q=${assunto}&pageSize=${resultsPerPage}&language=pt&page=${page}&apiKey=${this.chave}`;\r\n    console.log(result);\r\n    return this.http.get(result);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { MainPage } from './main.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: MainPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class MainPageRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { MainPageRoutingModule } from './main-routing.module';\r\n\r\nimport { MainPage } from './main.page';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\n@NgModule({\r\n  imports: [\r\n    HttpClientModule,\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    MainPageRoutingModule\r\n  ],\r\n  declarations: [MainPage]\r\n})\r\nexport class MainPageModule {}\r\n","export default \"ion-img {\\n  min-height: 1px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnZXMvbWFpbi9tYWluLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLGVBQUE7QUFDSiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL21haW4vbWFpbi5wYWdlLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJpb24taW1ne1xyXG4gICAgbWluLWhlaWdodDogMXB4O1xyXG59Il19 */\";","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { LoadingController } from '@ionic/angular';\r\nimport { NewsApiService } from 'src/app/news/news-api.service';\r\n\r\n@Component({\r\n  selector: 'app-main',\r\n  templateUrl: './main.page.html',\r\n  styleUrls: ['./main.page.scss'],\r\n  providers: [NewsApiService]\r\n})\r\nexport class MainPage implements OnInit {\r\n\r\n  public lista_news = new Array<any>();\r\n  public subject:string;\r\n  public title:string;\r\n  public page = 1;\r\n  public maxPage:number;\r\n  public resultsPerPage = 20;\r\n  public user:string;\r\n\r\n  constructor(\r\n    public newsApi:NewsApiService, \r\n    private activatedRoute:ActivatedRoute, \r\n    public loadingController:LoadingController) { }\r\n\r\n  ngOnInit() {\r\n    this.subject = this.activatedRoute.snapshot.paramMap.get('id');\r\n    this.title = this.activatedRoute.snapshot.paramMap.get('title');\r\n    this.user = this.activatedRoute.snapshot.paramMap.get('user');\r\n    console.log(this.title);\r\n  }\r\n\r\n  efeitoRefresh(event){\r\n    this.page = 1;  \r\n    this.carregaPagina();\r\n\r\n    setTimeout(() => {\r\n      event.target.complete();\r\n    }, 500);\r\n  }\r\n\r\n  carregaPagina(){\r\n    this.newsApi.getEverythingAbout(this.subject, this.page).subscribe(\r\n      data=>{\r\n        const response = (data as any);\r\n        /*this.lista_news = this.lista_news.concat(response.articles);\r\n        this.maxPage = Math.floor(response.totalResults/this.resultsPerPage);*/\r\n        if(this.page == 1){\r\n          this.lista_news = response.articles;\r\n        }else{\r\n          this.lista_news = this.lista_news.concat(response.articles);\r\n        }\r\n        this.maxPage = Math.floor(response.totalResults/this.resultsPerPage);\r\n        if(response.totalResults%this.resultsPerPage!=0){\r\n          this.maxPage++;\r\n        } \r\n        console.log(this.maxPage)\r\n      },\r\n\r\n      error=>{\r\n        console.log(error);\r\n      }\r\n    )\r\n  }\r\n\r\n  ionViewDidEnter(){\r\n    this.carregaPagina();\r\n    this.efeitoLoading();\r\n  }\r\n\r\n  async efeitoLoading(){\r\n    const loading = await this.loadingController.create({\r\n      message: 'Carregando as notícias', \r\n      duration: 4000\r\n    });\r\n\r\n    await loading.present();\r\n\r\n    const { role, data } = await loading.onDidDismiss();\r\n  }\r\n\r\n  efeitoScrollInfinito(event) {\r\n    if(this.page==this.maxPage){\r\n      event.target.disabled = true;\r\n    }\r\n    if(this.page!=this.maxPage){\r\n      setTimeout(() => {\r\n        this.page++;\r\n        this.carregaPagina();\r\n        console.log('Done');\r\n        event.target.complete();\r\n      }, 4000);\r\n    }\r\n  }\r\n\r\n\r\n}\r\n"]}